<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>資料分組：使用 HashSet 或 GroupBy + SelectMany 取得各分組的前 N 筆資料</title>
    <url>/2022/08/20/grouping_data_using_hashset_or_linq/</url>
    <content><![CDATA[<p><a href="/2022/08/20/grouping_data_using_hashset_or_linq"><img src="/2022/08/20/grouping_data_using_hashset_or_linq/Cover.png" alt="資料分組：使用 HashSet 或 GroupBy + SelectMany 取得各分組的前 N 筆資料"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近遇到一個需求，要將多欄位的資料分組，再將各分組的資料排序後，取出前 N 筆資料出來，舉例如下圖。</p>
<p><img src="/2022/08/20/grouping_data_using_hashset_or_linq/legend.png" alt="需求圖例"></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> list = GetSampleData();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Player&gt; <span class="title">GetSampleData</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> List&lt;Player&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">new</span> Player &#123; PlayerId=<span class="string">"001"</span>, PlayerName=<span class="string">"Sam"</span>, Team=<span class="string">"Blue Team"</span>, Game=<span class="string">"Black Jack"</span>, Score=<span class="number">798</span> &#125;,</span><br><span class="line">        <span class="keyword">new</span> Player &#123; PlayerId=<span class="string">"002"</span>, PlayerName=<span class="string">"Jack"</span>, Team=<span class="string">"Blue Team"</span>, Game=<span class="string">"Poker Hand"</span>, Score=<span class="number">823</span> &#125;,</span><br><span class="line">        <span class="keyword">new</span> Player &#123; PlayerId=<span class="string">"003"</span>, PlayerName=<span class="string">"Tiffany"</span>, Team=<span class="string">"Red Team"</span>, Game=<span class="string">"Black Jack"</span>, Score=<span class="number">627</span> &#125;,</span><br><span class="line">        <span class="keyword">new</span> Player &#123; PlayerId=<span class="string">"004"</span>, PlayerName=<span class="string">"Betty"</span>, Team=<span class="string">"Red Team"</span>, Game=<span class="string">"Poker Hand"</span>, Score=<span class="number">803</span> &#125;,</span><br><span class="line">        <span class="keyword">new</span> Player &#123; PlayerId=<span class="string">"005"</span>, PlayerName=<span class="string">"Jessica"</span>, Team=<span class="string">"Red Team"</span>, Game=<span class="string">"Solitaire"</span>, Score=<span class="number">858</span> &#125;,</span><br><span class="line">        <span class="keyword">new</span> Player &#123; PlayerId=<span class="string">"006"</span>, PlayerName=<span class="string">"Mia"</span>, Team=<span class="string">"Red Team"</span>, Game=<span class="string">"Poker Hand"</span>, Score=<span class="number">943</span> &#125;,</span><br><span class="line">        <span class="keyword">new</span> Player &#123; PlayerId=<span class="string">"007"</span>, PlayerName=<span class="string">"Tom"</span>, Team=<span class="string">"Blue Team"</span>, Game=<span class="string">"Black Jack"</span>, Score=<span class="number">661</span> &#125;,</span><br><span class="line">        <span class="keyword">new</span> Player &#123; PlayerId=<span class="string">"008"</span>, PlayerName=<span class="string">"Cindy"</span>, Team=<span class="string">"Red Team"</span>, Game=<span class="string">"Solitaire"</span>, Score=<span class="number">735</span> &#125;,</span><br><span class="line">        <span class="keyword">new</span> Player &#123; PlayerId=<span class="string">"009"</span>, PlayerName=<span class="string">"Jenny"</span>, Team=<span class="string">"Red Team"</span>, Game=<span class="string">"Black Jack"</span>, Score=<span class="number">513</span> &#125;,</span><br><span class="line">        <span class="keyword">new</span> Player &#123; PlayerId=<span class="string">"010"</span>, PlayerName=<span class="string">"Ken"</span>, Team=<span class="string">"Blue Team"</span>, Game=<span class="string">"Solitaire"</span>, Score=<span class="number">672</span> &#125;,</span><br><span class="line">        <span class="keyword">new</span> Player &#123; PlayerId=<span class="string">"011"</span>, PlayerName=<span class="string">"Joey"</span>, Team=<span class="string">"Blue Team"</span>, Game=<span class="string">"Poker Hand"</span>, Score=<span class="number">957</span> &#125;,</span><br><span class="line">        <span class="keyword">new</span> Player &#123; PlayerId=<span class="string">"012"</span>, PlayerName=<span class="string">"Mary"</span>, Team=<span class="string">"Red Team"</span>, Game=<span class="string">"Black Jack"</span>, Score=<span class="number">759</span> &#125;,</span><br><span class="line">        <span class="keyword">new</span> Player &#123; PlayerId=<span class="string">"013"</span>, PlayerName=<span class="string">"John"</span>, Team=<span class="string">"Blue Team"</span>, Game=<span class="string">"Solitaire"</span>, Score=<span class="number">724</span> &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Player</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> PlayerId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> PlayerName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Team &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Game &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Score &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>印象中，三年前回鍋軟體開發，自學 C# 時有用 LINQ 做過類似的練習，之後一直沒機會遇到這種使用情境，時間久便忘記要怎麼寫了。</p>
<p>想不起來 LINQ 要怎麼寫，當下先用想到的方式解決，假日把 LINQ 的寫法也研究回來，現在整理成筆記，將來就不用再花時間重做功課了。</p>
<p>按照時間序，總共研究出三種寫法：</p>
<ul>
<li><p>方法一：使用 HashSet 處理</p>
</li>
<li><p>方法二：使用 LINQ - ToHashSet() 處理</p>
</li>
<li><p>方法三：使用 LINQ - GroupBy() 與 SelectMany() 處理</p>
</li>
</ul>
<a id="more"></a>

<p>不想看過程的話，可以直接跳到 <a href="#method3">方法三：使用 LINQ - GroupBy() 與 SelectMany() 處理</a></p>
<hr>

<h2 id="方法一：使用-HashSet-處理"><a href="#方法一：使用-HashSet-處理" class="headerlink" title="方法一：使用 HashSet 處理"></a>方法一：使用 HashSet 處理</h2><p>這個做法用到之前在 <a href="/2022/07/24/csharp_override_equals_and_gethashcode/">C# 覆寫 Equals 方法，為何要覆寫 GetHashCode 方法</a> 提過的規則，HashSet 在加入資料時，遇到重複會略過的特性。</p>
<p>實作的概念：</p>
<p>在 Player 類別覆寫 Equals() 和 GetHashCode() 方法，自訂判斷重複的檢查條件，讓 HashSet&lt;Player&gt; 在 Add() 時略過不要的資料即可。</p>
<p>將 List&lt;Player&gt; 先做好 Score 的降冪排序，再逐筆加進 HashSet&lt;Player&gt; 內，讓 HashSet 內只剩下每組 Team + Game 不重複的資料，且該筆資料是該分組最高分就完成了。</p>
<p>按照範例的需求，要用 Team 和 Game 屬性當做分組的條件，覆寫的方法如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Player</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> PlayerId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> PlayerName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Team &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Game &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Score &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">bool</span> <span class="title">Equals</span>(<span class="params"><span class="keyword">object</span> obj</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">bool</span> result = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">is</span> Player)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> input = (Player)obj;</span><br><span class="line">            <span class="comment">// 加入至 HashSet&lt;Player&gt; 時，相同 Team + Game 的組合會被視為重複而略過</span></span><br><span class="line">            result = (Team == input.Team &amp;&amp; Game == input.Game);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">int</span> <span class="title">GetHashCode</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> &#123; Team, Game &#125;.GetHashCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但我直覺認為不該覆寫 Player 類別，資料分組不屬於 Player 類別的工作。</p>
<p>我覺得可以再新增一個處理資料分組專用的 TempModel，讓他繼承 Player 所有屬性，然後覆寫 TempModel 類別的 Equals()、GetHashCode() 方法，再利用 HashSet&lt;TempModel&gt; 的 Add() 方法過濾資料，就不會污染 Player 類別了。</p>
<p>而處理 HashSet.Add() 的動作，又可以封裝到 DistinctData 類別內，只要在建立 DistinctData 物件時，將 List&lt;Player&gt; 資料送進 ctor 建構式，讓 DistinctData 完成資料分組和取最高分的動作，最後再透過一個 Result() 方法將結果取出即可。</p>
<p>有了這個想法後，接著就想到 TempModel 也可以封裝進這個 DistinctData 類別內，因為外面用不到 TempModel 類別，就不需要公開出來。</p>
<p>綜合以上想法，得到的完成品如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> list = GetSampleData();</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">new</span> DistinctData(list).Result(); <span class="comment">// 最終結果</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Player 類別維持原狀</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Player</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> PlayerId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> PlayerName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Team &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Game &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Score &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 處理資料分組的類別</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DistinctData</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Player&gt; _distinctResult;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ctor 建構式，收到資料就直接處理資料分組</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DistinctData</span>(<span class="params">List&lt;Player&gt; list</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _distinctResult = <span class="keyword">new</span> List&lt;Player&gt;();</span><br><span class="line">        Distinct(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取出最終結果的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Player&gt; <span class="title">Result</span>(<span class="params"></span>)</span> =&gt; _distinctResult;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 封裝在 DistinctData 類別內，處理資料分組的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Distinct</span>(<span class="params">List&lt;Player&gt; list</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (list == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Step 1: 將 Player 映射成 TempModel 物件，順便做好分數降冪排序</span></span><br><span class="line">        <span class="keyword">var</span> orderedlist = list</span><br><span class="line">            .Select(s =&gt; <span class="keyword">new</span> TempModel</span><br><span class="line">            &#123;</span><br><span class="line">                PlayerId = s.PlayerId,</span><br><span class="line">                PlayerName = s.PlayerName,</span><br><span class="line">                Team = s.Team,</span><br><span class="line">                Game = s.Game,</span><br><span class="line">                Score = s.Score,</span><br><span class="line">            &#125;) <span class="comment">// 映射成 TempModel，此類別內有覆寫判斷重複的方法</span></span><br><span class="line">            .OrderByDescending(o =&gt; o.Score); <span class="comment">// 高分的排上面 (以取得每個分組的最高分資料)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Step 2: 利用 HashSet&lt;T&gt; Add() 方法的特性，過濾資料</span></span><br><span class="line">        <span class="keyword">var</span> hashSet = <span class="keyword">new</span> HashSet&lt;TempModel&gt;();</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> data <span class="keyword">in</span> orderedlist)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 利用 HashSet.Add() 遇到重複的內容會略過的特性，過濾掉不要的資料</span></span><br><span class="line">            <span class="comment">// 可參考 https://sam.webspace.tw/2022/07/24/csharp_override_equals_and_gethashcode/</span></span><br><span class="line">            hashSet.Add(data); <span class="comment">// HashSet.Add() 會使用 TempModel 覆寫的方法去除重複資料</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Step 3: 將 TempModel 轉型回 Player，並做輸出需要的排序，放入回傳結果用的欄位</span></span><br><span class="line">        _distinctResult = hashSet</span><br><span class="line">            .Cast&lt;Player&gt;() <span class="comment">// 將 TempModel 轉型回 Player</span></span><br><span class="line">            .OrderBy(o =&gt; o.Game) <span class="comment">// 最終結果排序 Gamer ASC, Score DESC</span></span><br><span class="line">            .ThenByDescending(t =&gt; t.Score)</span><br><span class="line">            .ToList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TempModel 為私有類別，繼承 Player 所有屬性，且只在 DistinctData 類別內使用</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title">TempModel</span> : <span class="title">Player</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">bool</span> <span class="title">Equals</span>(<span class="params"><span class="keyword">object</span> obj</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">bool</span> result = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (obj <span class="keyword">is</span> Player)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> input = (Player)obj;</span><br><span class="line">                <span class="comment">// 判斷是否可加入 HashSet 的條件 (定義是否判斷為資料重複的欄位)</span></span><br><span class="line">                <span class="comment">// 相同 Team + Game 組合的資料，只會有一筆加入到 HashSet 內</span></span><br><span class="line">                result = (Team == input.Team &amp;&amp; Game == input.Game);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">int</span> <span class="title">GetHashCode</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> &#123; Team, Game &#125;.GetHashCode();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行結果：<br><img src="/2022/08/20/grouping_data_using_hashset_or_linq/legend.png" alt="執行結果"></p>
<hr>

<h2 id="方法二：使用-LINQ-ToHashSet-處理"><a href="#方法二：使用-LINQ-ToHashSet-處理" class="headerlink" title="方法二：使用 LINQ - ToHashSet() 處理"></a>方法二：使用 LINQ - ToHashSet() 處理</h2><p>這是方法一的改進版，在重構方法一的過程，想到 LINQ 有 ToHashSet() 方法，這個方法可傳入 IEqualityComparer&lt;T&gt;，就不需要 DistinctData 和 TempModel 類別了，程式碼簡化成這樣：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = GetSampleData()</span><br><span class="line">        .OrderByDescending(o =&gt; o.Score) <span class="comment">// 高分的排上面 (以取得每個分組的最高分資料)</span></span><br><span class="line">        .ToHashSet(<span class="keyword">new</span> PlayerComparer()) <span class="comment">// 利用 ToHashSet() 與自訂的 IEqualityComparer 完成資料分組並只留下各組的最高分</span></span><br><span class="line">        .OrderBy(o =&gt; o.Game) <span class="comment">// 最終結果排序 Gamer ASC, Score DESC</span></span><br><span class="line">        .ThenByDescending(t =&gt; t.Score)</span><br><span class="line">        .ToList();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 給 ToHashSet() 用的 IEqualityComparer</span></span><br><span class="line">public class PlayerComparer : IEqualityComparer&lt;Player&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">Equals</span>(<span class="params">Player a, Player b</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">            b != <span class="literal">null</span> &amp;&amp; a != <span class="literal">null</span></span><br><span class="line">            &amp;&amp; a.Team == b.Team</span><br><span class="line">            &amp;&amp; a.Game == b.Game;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">GetHashCode</span>(<span class="params">Player obj</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> &#123; obj.Team, obj.Game &#125;.GetHashCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相同的執行結果：<br><img src="/2022/08/20/grouping_data_using_hashset_or_linq/legend.png" alt="執行結果"></p>
<hr>
<a id="method3" name="method3"></a>

<h2 id="方法三：使用-LINQ-GroupBy-與-SelectMany-處理"><a href="#方法三：使用-LINQ-GroupBy-與-SelectMany-處理" class="headerlink" title="方法三：使用 LINQ - GroupBy() 與 SelectMany() 處理"></a>方法三：使用 LINQ - GroupBy() 與 SelectMany() 處理</h2><p>最後找到以前寫的很雜亂的筆記，重新拼湊出 LINQ 的寫法了，這次連 IEqualityComparer&lt;T&gt; 都省了，直接在 Main() 裡完成整個動作。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = GetSampleData()</span><br><span class="line">        .GroupBy(g =&gt; <span class="keyword">new</span> &#123; g.Team, g.Game &#125;) <span class="comment">// 將相同的 Team 與 Game 分在同組</span></span><br><span class="line">        .SelectMany(<span class="keyword">group</span> =&gt; <span class="comment">// 將下面三行處理完的 GroupBy 分組資料合併起來</span></span><br><span class="line">            <span class="keyword">group</span>.OrderByDescending(o =&gt; o.Score) <span class="comment">// 每個分組做 Score 降冪排序</span></span><br><span class="line">            .Take(<span class="number">1</span>) <span class="comment">// 每個分組取出前 N 筆</span></span><br><span class="line">            .Select(s =&gt; <span class="keyword">new</span> Player</span><br><span class="line">            &#123;</span><br><span class="line">                PlayerId = s.PlayerId,</span><br><span class="line">                PlayerName = s.PlayerName,</span><br><span class="line">                Team = <span class="keyword">group</span>.Key.Team, <span class="comment">// 也可以寫 s.Team</span></span><br><span class="line">                Game = <span class="keyword">group</span>.Key.Game, <span class="comment">// 也可以寫 s.Game,</span></span><br><span class="line">                Score = s.Score,</span><br><span class="line">            &#125;)</span><br><span class="line">        )</span><br><span class="line">        .OrderBy(o =&gt; o.Game) <span class="comment">// 最終結果排序 Gamer ASC, Team ASC, Score DESC</span></span><br><span class="line">        .ThenBy(t1 =&gt; t1.Team)</span><br><span class="line">        .ThenByDescending(t2 =&gt; t2.Score)</span><br><span class="line">        .ToList()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>GroupBy 與 SelectMany 圖解<br><img src="/2022/08/20/grouping_data_using_hashset_or_linq/GroupBy_SelectMany_diagram.png" alt="GroupBy 與 SelectMany 圖解"></p>
<p>執行結果：<br><img src="/2022/08/20/grouping_data_using_hashset_or_linq/legend.png" alt="執行結果"></p>
<p>只要將 .Take(1) 改成 .Take(N) 就可以取出每組的前 N 筆資料，例如 .Take(2) 的結果如下：</p>
<p><img src="/2022/08/20/grouping_data_using_hashset_or_linq/GroupBy_SelectMany.png" alt="Take(2) 執行結果"></p>
<p>程式碼短、資料分組完還能指定每組要取幾筆，LINQ 真香。</p>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>集合</tag>
        <tag>LINQ</tag>
      </tags>
  </entry>
  <entry>
    <title>工作雜記：ASP.NET Core 5 MVC 解決檔案上傳損壞問題</title>
    <url>/2022/08/05/net5_mvc_upload_file_corrupted/</url>
    <content><![CDATA[<p><a href="/2022/08/05/net5_mvc_upload_file_corrupted"><img src="/2022/08/05/net5_mvc_upload_file_corrupted/Cover.png" alt="工作雜記：ASP.NET Core 5 MVC 解決檔案上傳損壞問題"></a></p>
<h2 id="問題描述"><a href="#問題描述" class="headerlink" title="問題描述"></a>問題描述</h2><p>昨天收到朋友的求救，他在其他駐點的工程師遇到一個奇怪的問題，已經處理三、四天還是解決不了，請我幫忙處理。</p>
<p>對方負責的專案是用 ASP.NET Core 5 MVC 開發的，有一個上傳 Excel 匯入資料的功能，在 IDE 將站台執行起來，可正常上傳並匯入資料，但發佈到測試機的 IIS 站台，檔案上傳完在匯入資料時會發生例外。</p>
<p>為了修正問題，在匯入 Excel 的部份，他嘗試換過各種套件，但全都發生例外，各套件出現的訊息如下：</p>
<ul>
<li>ClosedXML：FileFormatException: File contains corrupted data</li>
<li>NPOI：ZipException: EOF in header</li>
<li>ExcelDataReader：Offset to Central Directory cannot be held in an Int64</li>
</ul>
<p>後來他發現上傳到 Server 的 Excel 檔案都無法開啟，似乎檔案都壞了。</p>
<p>也嘗試修改檔案上傳的寫法，但都無效，寫入的檔案就是會損壞。</p>
<a id="more"></a>

<h2 id="處理過程"><a href="#處理過程" class="headerlink" title="處理過程"></a>處理過程</h2><h3 id="初步猜測"><a href="#初步猜測" class="headerlink" title="初步猜測"></a>初步猜測</h3><p>「檔案上傳、本機 IDE 執行正常、發佈到測試機 IIS 異常」從這幾個關鍵點，一開始我在猜會不會和寫入權限有關，但既然檔案都寫進去了，只是檔案壞掉，那就排除權限問題。</p>
<p>接下來是懷疑檔案上傳時，可能遇到 UTF8 編碼相關問題，造成寫出壞檔的結果，先跟對方拿原始碼來看看。</p>
<h3 id="原始碼"><a href="#原始碼" class="headerlink" title="原始碼"></a>原始碼</h3><p>以下是上傳檔案相關的程式碼，內容已簡化修改，只保留講解必要的部份。</p>
<ul>
<li><p><strong>View (HTML 部份) 原始碼</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"file_Choose"</span> <span class="attr">width</span>=<span class="string">"400"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn_FileUpload"</span>&gt;</span>確認上傳<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>View (JS 部份) 原始碼</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//確定上傳</span></span><br><span class="line">$(<span class="string">'#btn_FileUpload'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (confirmVerify()) &#123;</span><br><span class="line">        <span class="keyword">var</span> file = $(<span class="string">'#file_Choose'</span>)[<span class="number">0</span>].files[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">var</span> inputData = <span class="keyword">new</span> FormData();</span><br><span class="line">        inputData.append(<span class="string">'FormFile'</span>, file);</span><br><span class="line">        Upload(inputData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//上傳</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Upload</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">'UploadExample'</span>,</span><br><span class="line">        data: data,</span><br><span class="line">        type: <span class="string">'POST'</span>,</span><br><span class="line">        dataType: <span class="string">'json'</span>,</span><br><span class="line">        contentType: <span class="literal">false</span>,</span><br><span class="line">        processData: <span class="literal">false</span>,</span><br><span class="line">        <span class="keyword">async</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 略</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>View Model 原始碼</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">InputModel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> IFormFile FormFile &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment">// 略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Controller 原始碼</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">HttpPost</span>]</span><br><span class="line">[<span class="meta">Route(<span class="meta-string">"UploadExample"</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">UploadExampleAsync</span>(<span class="params">[FromForm] InputModel input</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 略</span></span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> fs = <span class="keyword">new</span> FileStream(filePath, FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.ReadWrite))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 儲存檔案</span></span><br><span class="line">        <span class="keyword">await</span> input.FormFile.CopyToAsync(fs);</span><br><span class="line">        <span class="comment">// 略</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="縮小問題範圍"><a href="#縮小問題範圍" class="headerlink" title="縮小問題範圍"></a>縮小問題範圍</h3><p>上面的 Code 看起來很正常，頁面是用 AJAX Post 檔案到 Controller，Controller 再用 FileStream 將檔案寫入硬碟，看不出有哪邊會讓檔案壞掉的地方，也沒看到檔案有經過編碼處理的問題。</p>
<p>且對方說在 IDE 執行是正常的，那就先排除這邊 Code 的問題。</p>
<p>如果像無頭蒼蠅亂猜，對找問題很沒效率，所以我先將問題區分為「內在因素」和「外在因素」兩個方向，並試著排除掉一個方向，把問題的範圍縮小。</p>
<p>當下的猜測如下</p>
<ul>
<li>「內在因素」：問題可能是在 Debug 模式和發佈版本之間的差異。</li>
<li>「外在因素」：或許連線到測試主機有經過一些網通設備，在上傳檔案時，封包被這些設備加料，導致寫檔損壞。</li>
</ul>
<p>先從「內在因素」開始，請對方將發佈給測試主機的打包，放到本機 IIS 裡執行，看看是否可以重現出相同問題。</p>
<p>對方測試後，果然在本機 IIS 重現問題了，這時鬆了一口氣，到這邊幾乎可以肯定問題是出在 Debug 和發佈版之間的差異處了，通常這個差異就在 Pipeline 註冊 Middleware 的地方，範圍瞬間縮小許多。</p>
<h3 id="確認問題點"><a href="#確認問題點" class="headerlink" title="確認問題點"></a>確認問題點</h3><p>接下來請對方提供 Program.cs、Startup.cs、Appsettings.json 等檔案。</p>
<ul>
<li><strong>Startup.cs 原始碼</strong></li>
</ul>
<p><img src="/2022/08/05/net5_mvc_upload_file_corrupted/Startup_cs.png" alt="Startup.cs"></p>
<p>在 pipeline 註冊 Middleware 的地方果然看到可疑分子，在發佈的版本會用到 ExceptionMiddleware 這個 Middleware，再請對方提供 ExceptionMiddleware 原始碼給我看。</p>
<ul>
<li><strong>ExceptionMiddleware.cs 原始碼</strong></li>
</ul>
<p><img src="/2022/08/05/net5_mvc_upload_file_corrupted/ExceptionMiddleware_cs.png" alt="ExceptionMiddleware.cs"></p>
<p>啊哈！抓到鬼了，這個 Middleware 把所有傳入的 HttpContext.Request.Body 都做 UFT8 編碼加料了，難怪上傳的檔案在寫入時會損壞，果然和一開始的預測一樣，只是當時沒料到問題會藏在 Middleware 這裡。</p>
<p>請對方先將這段轉換註解掉測試看看，檔案上傳功能正常了，確定就是這裡造成檔案損壞。</p>
<p>加個圖解，讓大家比較容易理解問題點真正的位置。</p>
<p><img src="/2022/08/05/net5_mvc_upload_file_corrupted/where_is_the_real_problem.jpg" alt="問題點的位置圖"></p>
<blockquote>
<p>原圖引用出處：<a href="https://lucaslra.medium.com/asp-net-core-mvc-pipeline-middleware-pipeline-cd9375db0d03" target="_blank" rel="noopener">[ASP.NET Core MVC Pipeline] Middleware Pipeline</a><br>內文也有解說 Pipeline 實作的細節。</p>
</blockquote>
<p>原本對方以為問題是出在 Controller 在處理上傳檔案和匯入 Excel 的方法（圖片 ❶ 處）。</p>
<p>經過抽絲剝繭，真正的問題卻是發生在 Pipeline 的 Middleware（圖片 ❷ 處）。</p>
<p>難怪對方花了三、四天都修不好，因為一直沒有修到問題的源頭。</p>
<h3 id="解決問題"><a href="#解決問題" class="headerlink" title="解決問題"></a>解決問題</h3><p>找到問題的源頭了，接下來要思考怎麼解決問題。</p>
<p>會有這段轉換 Request Body 的 Middleware 一定有原因，而且他會影響所有傳入的請求內容，如果拔掉肯定會產生更多問題，但留著又影響檔案上傳的功能。</p>
<p>對方也是剛接手這個案子，不了解這段轉換存在的目的，最後我們決定用比較安全的修改方式，在這段程式碼外再包一層判斷，當 Content-Type 是 multipart/form-data 時，就跳過，不要跑進這一段，這樣就不會影響檔案上傳的功能了。</p>
<p>完成修改，重新發佈到測試機 IIS 測試，問題解決了。</p>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>這個問題難解的原因是他隱藏在第一眼看不到的地方，就像病人說他腳痛，但腳其實很健康，真正的病因是腦炎，如果只醫腳，病永遠不會好。</p>
<p>之前上一堆課程、看許多文章和書果然沒白費，累積的知識點都用上了，如果缺少這些知識點，我就不具備在短時間內可找到這個問題的能力，也決定把這段修問題的過程分享出來，希望將來有天也能幫到其他人。</p>
]]></content>
      <categories>
        <category>工作雜記</category>
      </categories>
      <tags>
        <tag>Middleware</tag>
        <tag>ASP.NET Core 5 MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>C# 覆寫 Equals 方法，為何要覆寫 GetHashCode 方法</title>
    <url>/2022/07/24/csharp_override_equals_and_gethashcode/</url>
    <content><![CDATA[<p><a href="/2022/07/24/csharp_override_equals_and_gethashcode"><img src="/2022/07/24/csharp_override_equals_and_gethashcode/Cover.png" alt="C# 覆寫 Equals 方法，為何要覆寫 GetHashCode 方法"></a></p>
<h3 id="前置知識"><a href="#前置知識" class="headerlink" title="前置知識"></a>前置知識</h3><p>在看本文之前，要先知道什麼是 Value Type (實質型別) 和 Reference Type (參考型別)，不熟的朋友可以參考這篇文章</p>
<blockquote>
<p><a href="https://xingulin.tumblr.com/post/48493582986/ref-type-vs-val-type" target="_blank" rel="noopener">[C#][筆記] Value Type (實值型別) vs. Reference Type (參考型別)</a></p>
</blockquote>
<h3 id="隱含繼承-Object-類別"><a href="#隱含繼承-Object-類別" class="headerlink" title="隱含繼承 Object 類別"></a>隱含繼承 Object 類別</h3><p>微軟官方教學文件有提到，所有的型別都隱含繼承自 Object 類別。</p>
<blockquote>
<p><a href="https://docs.microsoft.com/zh-tw/dotnet/csharp/fundamentals/tutorials/inheritance#implicit-inheritance" target="_blank" rel="noopener">C# 中的繼承 Microsoft Docs</a></p>
</blockquote>
<p>因此用所有型別建立出來的物件都可以使用從 Object 繼承來的方法，如下圖</p>
<p><img src="/2022/07/24/csharp_override_equals_and_gethashcode/implicit-inheritance.jpg" alt="隱含繼承 Object 類別的方法"></p>
<h3 id="Object-的-Equals-方法"><a href="#Object-的-Equals-方法" class="headerlink" title="Object 的 Equals 方法"></a>Object 的 Equals 方法</h3><p>宣告一個 Data 類別，並分別建立出兩個物件給 data1 和 data2 變數，這裡刻意將欄位都填入相同的值，再用繼承自 Object 的 Equals 方法比較兩個物件是否相等。</p>
<p><img src="/2022/07/24/csharp_override_equals_and_gethashcode/Object.Equals.jpg" alt="Object 的 Equals 方法"></p>
<p>因為是 Reference Type (參考型別)，雖然 data1 和 data2 所有欄位的值都相同，但兩個變數在 Stack 內儲存的記憶體位址的值是不同的，因此 Equals 回傳的結果為 false。</p>
<h3 id="覆寫-Equals-方法"><a href="#覆寫-Equals-方法" class="headerlink" title="覆寫 Equals 方法"></a>覆寫 Equals 方法</h3><p>如果我們希望將比對條件改為物件內欄位的值，可以覆寫 Equals 方法，自訂比對的條件，例如希望這個物件的 Equals 要同時比對 Id 和 Name 兩個欄位的值，可以這樣寫：</p>
<p><img src="/2022/07/24/csharp_override_equals_and_gethashcode/override_Equals.jpg" alt="覆寫 Equals 方法"></p>
<p>自訂比對的條件，覆寫 Equals 方法：</p>
<ul>
<li>若傳入 Equals 的物件參數(要比對的對象)不是 Data 型別，回傳 false。  </li>
<li>若傳入的物件參數是 Data 型別，比對 Id 和 Name 兩個欄位的值是否相等，並回傳比對結果。  </li>
</ul>
<p>此時 IDE 在 Data 類別的宣告處出現綠色波浪提示訊息，提示我們覆寫 Equals 方法時，也要覆寫 GetHashCode 方法。</p>
<p>什麼是 GetHashCode？為什麼要覆寫這個方法？在說明前，先科普什麼是「雜湊表」。</p>
<a id="more"></a>

<p><img src="/2022/07/24/csharp_override_equals_and_gethashcode/should_override_GetHashCode.jpg" alt="IDE 提示要覆寫 GetHashCode 方法的訊息"></p>
<h3 id="關於雜湊表"><a href="#關於雜湊表" class="headerlink" title="關於雜湊表"></a>關於雜湊表</h3><p>資料結構中有一種組織資料的方式稱為「雜湊表」，在 C# 語言中 HashSet&lt;T&gt;、Dictionary&lt;TKey, TValue&gt;、…等集合類別就是用雜湊表實現的。</p>
<p><font color='red'>可以把雜湊表想像成很多個桶子，每個桶子都有唯一的識別編號，而且<u>每個桶子都可放入不止一件物品</u>。</font></p>
<p>這種資料結構的優點是，當我們知道物品所在桶子的編號，只要先找到指定編號的桶子，再到這個桶子裡去找，一定會找到我們要的東西，找東西的速度會很快。比起每個桶子都打開來找，會省下不少時間。</p>
<p>雜湊表的概念中，把每個物品<font color='red'>平均分配到不同編號</font>的桶子是很重要的，如果把所有東西通通放進同一個編號的桶子，找東西時雖然只打開這一個桶子，卻還要每個物品逐一巡過比對才能找到確定要的東西，那用雜湊表就沒有意義了，不如放到陣列或 List 裡用迴圈比對。</p>
<p>雜湊表的概念在現實生活中的應用：</p>
<ul>
<li>圖書館的書本分類存放方式<br>書籍分門別類放在不同編號的書櫃，在相同編號的書櫃裡，放著許多相同分類的書。<br>找書的時候，依分類先找到該編號的書櫃，再到該編號的書櫃即可找到需要的書（不用每一櫃都找）。</li>
<li>書本、字典的索引頁<br>索引頁會列出每個關鍵字詞所在的頁數，不同字詞可能會出現在相同的頁數。<br>找內容時，先找到關鍵字詞所在的頁數，直接翻到該頁數即可找到指定字詞的內文（不用從第一頁找到最後一頁）。</li>
</ul>
<h3 id="覆寫-GetHashCode-方法"><a href="#覆寫-GetHashCode-方法" class="headerlink" title="覆寫 GetHashCode 方法"></a>覆寫 GetHashCode 方法</h3><p>從上面的說明可知，雜湊表會用到雜湊值，GetHashCode 就是產生雜湊值的方法，將物件放進這個雜湊值的桶子裡，需要時，先呼叫物件的 GetHashCode 得到雜湊值，在雜湊表找出這個雜湊值的桶子，從桶子裡取出這個物件，速度就加快了。</p>
<p>如果物件不放入雜湊表，則 GetHashCode 方法用不到，但我們無法預期別人會如何使用這個物件，所以在覆寫 Equals 方法時，先將 GetHashCode 寫好就很重要了。</p>
<p><img src="/2022/07/24/csharp_override_equals_and_gethashcode/GetHashCode.jpg" alt="GetHashCode 產生雜湊值"></p>
<p>上圖可看到 data1 和 data2 即使欄位的值都相同，但兩個物件是不同執行個體 (不同 new Data 所產生的物件)，繼承自 Object 的 GetHashCode 方法就會產生不同的雜湊值。</p>
<p>但前面我們覆寫 Equals 方法比較是否相等的條件，比對的是 Id 和 Name 兩個欄位的值，在 data1 和 data2 的內容都相同的情況下，我們希望他的雜湊值也要一樣，此時可以覆寫 GetHashCode 方法，用自訂的條件去產生雜湊值（如下圖）。</p>
<p><img src="/2022/07/24/csharp_override_equals_and_gethashcode/AnonymousType_GetHashCode.jpg" alt="匿名型別的 GetHashCode 方法"></p>
<p>上面在 GetHashCode 方法用到一個實用的技巧是大神 <a href="https://www.facebook.com/91agile" target="_blank" rel="noopener">Joey Chen</a> 教的，借用匿名型別實作的 GetHashCode 方法，在 new 匿名型別時，只要傳入欄位的值都一樣，產生出來的雜湊值就會相同。</p>
<h3 id="C-用雜湊表實現的集合類別"><a href="#C-用雜湊表實現的集合類別" class="headerlink" title="C# 用雜湊表實現的集合類別"></a>C# 用雜湊表實現的集合類別</h3><p>在 C# 語言中，用雜湊表實現的集合類別有很多種，例如 HashSet&lt;T&gt;、Dictionary&lt;TKey, TValue&gt;、SortedList&lt;TKey, TValue&gt;、HashTable、SortedList、…等。</p>
<p>當 GetHashCode 已存在雜湊表內，且 Equals 回傳為 true (物件比對相等)，表示新加入的物件已經存在雜湊表內，不再重複加入。</p>
<ul>
<li>在 HashSet 加入重複的物件會略過，只會加入唯一不重複的物件進去。</li>
<li>在 Dictionary 加入重複的物件會發生例外。</li>
</ul>
<p>接下來用 Data 類別建立 data1、data2 兩個物件，並將這兩個物件加入到 HashSet&lt;Data&gt; 內，試試以下不同情境，看看會發生什麼事。</p>
<ul>
<li><p>用 Object 的 GetHashCode 方法產生雜湊碼。<br>data1、data2 兩個物件的 GetHashCode 都不同，所以如預期的，兩個物件都會加入到 HashSet&lt;Data&gt; 中。<br><img src="/2022/07/24/csharp_override_equals_and_gethashcode/Add_Object_GetHashCode_To_HashSet.jpg" alt="用 Object 的 GetHashCode 方法加入 HashSet"></p>
</li>
<li><p>用自訂的 GetHashCode 方法產生雜湊碼，條件是用 Id + Name 欄位的值產生。<br>data1、data2 是兩個執行個體，但我們讓兩個物件的 GetHashCode 的值相同，在加入到雜湊表集合時，會先呼叫 GetHashCode 檢查雜湊表內是否存已存在這組雜湊碼，接著：  </p>
<ol>
<li>若雜湊碼不存在，將物件加入雜湊表<br>data1.GetHashCode() 不存在雜湊表，將 data1 物件加入。  </li>
<li>若雜湊碼已存在，取出表內雜湊碼相同的所有物件，逐一呼叫物件的 Equals 方法和新加入物件相比是否相同，當回傳為 false 才加入雜湊表。<br>data1.Equals(data2) == true，因此 data2 不會加入雜湊表。<br>此例最終只有 data1 會加入到 hashSet 中。<br><img src="/2022/07/24/csharp_override_equals_and_gethashcode/Add_SameHashCode_Equals_To_HashSet.jpg" alt="用自訂的 GetHashCode 方法加入 HashSet"></li>
</ol>
</li>
</ul>
<p>同樣的情形，在 Dictionary 會出現例外<br><img src="/2022/07/24/csharp_override_equals_and_gethashcode/Add_SameHashCode_Equals_To_Dictionary.jpg" alt="用自訂的 GetHashCode 方法加入 HashSet"></p>
<h3 id="什麼情況會遇到-GetHashCode-相同，但-Equals-為-false-的情況？"><a href="#什麼情況會遇到-GetHashCode-相同，但-Equals-為-false-的情況？" class="headerlink" title="什麼情況會遇到 GetHashCode 相同，但 Equals 為 false 的情況？"></a>什麼情況會遇到 GetHashCode 相同，但 Equals 為 false 的情況？</h3><p>當 GetHashCode、Equals 兩個方法使用不同欄位條件時，就會遇到。</p>
<p>如下圖，GetHashCode 只用 Id 欄位去產生，但 Equals 是用 Id + Name 欄位的值比對，此時三個 Data 物件都會加入到雜湊表集合內，並且都放在同一個雜湊碼的桶子裡。</p>
<p>我們在 Equals 和 GetHashCode 方法內加入 Console.WriteLine() 觀察雜湊表取資料的過程，當遇到相同 GetHashCode 時，會取出同一個桶子內的所有資料，再逐一呼叫 Equals 方法比對，最後取出比對結果相符的物件。</p>
<p>在這個案例，沒有發揮出雜湊表的優勢。</p>
<p><img src="/2022/07/24/csharp_override_equals_and_gethashcode/Add_SameHashCode_NotEquals_To_HashSet.jpg" alt="相同的 GetHashCode 與不相等的 Equals 加入 HashSet"></p>
<h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><ul>
<li><p><font color='red'><b>比較物件是否相等，用的是 Equals 方法</b></font>，覆寫此方法可自訂比對的條件。</p>
</li>
<li><p><font color='red'><b>雜湊表會用到 GetHashCode 方法</b></font>，因為無法預期別人是否會將物件用於雜湊表，建議可先依據 Equals 的條件覆寫 GetHashCode 方法，避免將來在雜湊表使用此物件時遇到非預期的結果。</p>
</li>
<li><p><font color='red'><b>加到雜湊表的物件不能重複。</b></font></p>
</li>
<li><p>判斷雜湊表內物件是否「<font color='red'>重複</font>」的條件：<b>「<font color='red'>GetHashCode 相同</font>」 且 「<font color='red'>Equals 為 true</font>」。</b></p>
</li>
<li><p>判斷雜湊表內物件是否重複的流程：</p>
<ol>
<li><p><font color='red'>先呼叫 GetHashCode 方法，檢查雜湊表是否存在這個雜湊值</font>，若不存在，表示新加入的物件不重複，加入至雜湊表。</p>
</li>
<li><p><font color='red'>若雜湊值存在，再呼叫 Equals 方法，比對物件</font>，若不相等，表示新加入的物件不重複，加入至雜湊表。</p>
</li>
</ol>
</li>
<li><p>從雜湊表取出物件的流程：</p>
<ol>
<li><p><font color='red'>先呼叫 GetHashCode 方法，從雜湊表取出這個雜湊值的<u>所有物件</u></font>，物件數量越少越好。</p>
</li>
<li><p><font color='red'>再呼叫 Equals 方法，<u>逐一比對</u>物件是否相等</font>，若相等，回傳此物件。</p>
</li>
</ol>
</li>
</ul>
<h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><blockquote>
<ul>
<li><a href="https://stackoverflow.com/questions/371328/why-is-it-important-to-override-gethashcode-when-equals-method-is-overridden" target="_blank" rel="noopener">c# - Why is it important to override GetHashCode when Equals method is overridden</a>  </li>
<li><a href="https://stackoverflow.com/questions/10916995/why-is-c-sharp-hashset-accepting-the-adding-of-two-objects-with-same-gethashcode" target="_blank" rel="noopener">Why is C# hashSet accepting the adding of two objects with same getHashCode() value</a>  </li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>資料結構</tag>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title>離線同步 Git 版控記錄實踐：git format-patch 和 git bundle 的差異</title>
    <url>/2021/05/29/Git_what_is_the_difference_between_format-patch_and_bundle/</url>
    <content><![CDATA[<h2 id="模擬情境"><a href="#模擬情境" class="headerlink" title="模擬情境"></a>模擬情境</h2><p>公司有 Sam 和 Jack 兩位開發者，用公司內部 Git 版控儲存庫進行開發。</p>
<p>簡述版控流程，開發者先在自己的分支開發，再將結果合併回 <code>Develop</code> 分支驗測功能，驗證無誤再透過 PR 程序合併至 <code>master</code> 分支上線。</p>
<p>公司內部版控儲存庫不提供任何管道給外部網路連線使用，但有開放 Webex 可遠端連線進去控制公司內部的電腦。</p>
<p>如下圖，假設公司在 commit <code>e3251c8</code> 時開始實施 <strong>Work From Home</strong>，從這裡開始就無法再連線至公司內的遠端儲存庫。</p>
<p>  <img src="/2021/05/29/Git_what_is_the_difference_between_format-patch_and_bundle/image001.png" alt="image001.png" title="image001.png"></p>
<p>實施 <strong>Work From Home</strong> 後，Sam 開始修改本地 <code>Develop_Sam</code> 分支的 <code>README.md</code> 檔案內容，並且合併回本地的 <code>Develop</code> 分支。</p>
<p>  <img src="/2021/05/29/Git_what_is_the_difference_between_format-patch_and_bundle/image003.png" alt="image003.png" title="image003.png"></p>
<p>同時，Jack 也在修改本地 <code>Develop_Jack</code> 分支的 <code>README.md</code> 檔案內容，也合併回本地的 <code>Develop</code> 分支。</p>
<p>  <img src="/2021/05/29/Git_what_is_the_difference_between_format-patch_and_bundle/image005.png" alt="image005.png" title="image005.png"></p>
<p>前兩張圖可看到 Sam 與 Jack 在本地 <code>Develop</code> 分支的版控記錄 (Commit ID) 已經不一致了，雙方修改過的 <code>README.md</code> 檔案內容如下，之後若要合併肯定會發生衝突。</p>
<p>  <img src="/2021/05/29/Git_what_is_the_difference_between_format-patch_and_bundle/image007.png" alt="image007.png" title="image007.png"></p>
<p>接下來 Sam 和 Jack 要同步彼此的開發進度，但是連不到公司的版控儲存庫了，此時有以下幾種選擇。</p>
<h2 id="可用的方法"><a href="#可用的方法" class="headerlink" title="可用的方法"></a>可用的方法</h2><ol>
<li><p>使用外部私有 Git 遠端儲存庫同步彼此的版控記錄 <em>(公司沒有禁止的情況適用)</em></p>
<ul>
<li><p>此做法無法解決上版至公司內部儲存庫的問題，<strong>只能解決開發者間的版控同步問題 (但光是解決這個問題，就可省下大半的時間了)</strong></p>
</li>
<li><p>公司不一定允許 Source Code 放在外部的私有儲存庫</p>
</li>
</ul>
</li>
<li><p>將 Source Code (包含 <code>.git 目錄</code>) 通通打包傳給其他開發者或公司 <em>(你瘋了嗎？ <span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8">&#x1f606;</span>)</em></p>
<ul>
<li>每次交付的檔案都很大包，就算只改一個字，要上版都要整包傳輸，我實在想不到這個做法的優點…</li>
</ul>
</li>
<li><p><strong>用 <code>git bundle</code> 產生版控記錄檔 <em>(★ 推薦)</em></strong></p>
<ul>
<li><p>會產生一個容量很小的 binary 檔案利於傳輸，檔案大小取決於要包含的版控記錄多寡，裡面會有<strong>修改的檔案內容，以及 commit 版控記錄</strong>  </p>
</li>
<li><p>本地端可透過 <code>git pull</code> 將記錄檔的版控內容 pull 合併至本地分支，並且保持開發的版控記錄，也可以送入公司同步版控記錄</p>
</li>
<li><p><strong>可把 <code>git bundle</code> 當成原本 <code>git push</code> 的替代操作，只是變成離線版</strong>  </p>
</li>
</ul>
</li>
<li><p>用 <code>git format-patch</code> 產生內容修補檔 <em>(只適合交付修補程式用，不適合開發過程同步版控用)</em>  </p>
<ul>
<li><p>開發者可套用修補檔以更新彼此修改過的檔案內容，也可送入公司上版，但是<strong>在開發過程中，每個人的版控記錄會不一致</strong>  </p>
</li>
<li><p>修補檔記錄的是 <code>git diff</code> 的差異內容，檔案也不大，但不會保留版控記錄，套用修補檔時，<strong>背後是透過 <code>git commit</code> 在處理，會產生新的版控記錄 (commit hash)</strong>  </p>
</li>
<li><p><strong>版控記錄脫鉤，會造成查找問題或溝通上的困難，將來連回公司內部的版控儲存庫時，有可能要再面臨大量合併衝突的問題</strong>  </p>
</li>
<li><p><code>git format-patch</code> <strong>只適合交付修補程式用，不適合開發過程同步版控用</strong>，若不打算同步版控記錄就沒差了</p>
</li>
</ul>
</li>
</ol>
<p>為了節省大家寶貴的時間，先說結論</p>
<ul>
<li><p>如果公司<strong>禁止</strong>使用私有儲存庫  </p>
<ul>
<li><p>開發過程的版控同步<br>每位開發者的修改告一段落，就用 <code>git bundle</code> 產生 <code>Develop</code> 分支的版控記錄檔，交付給其他開發者同步 <code>Develop</code> 分支的版控記錄  </p>
</li>
<li><p>功能開發完成，要回傳公司上版<br>用 <code>git bundle</code> 產生 <code>Develop</code> 分支的版控記錄檔，只是這次要傳進公司，遠端遙控公司內部電腦操作 <code>git pull</code> 將版控記錄檔合併到 <code>Develop</code> 分支，驗測無誤後再 PR 合併至 <code>master</code> 分支  </p>
</li>
</ul>
</li>
<li><p>如果公司<strong>同意</strong>使用私有儲存庫 <em>(★ 個人認為這是最佳狀況)</em>  </p>
<ul>
<li>開發過程的版控同步<br>使用私有 Git 儲存庫進行開發，只有在這種非常時期才深刻體會到可以 <code>git push</code> 是幸福的 <span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8">&#x1f606;</span>  </li>
</ul>
<p>  <strong>(安全性要記得做好，否則 Source Code 外流就……<del><em>會變成 Open Source</em></del> <span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8">&#x1f606;</span> )</strong>  </p>
<ul>
<li>功能開發完成，要回傳公司上版<br>用 <code>git bundle</code> 產生 <code>Develop</code> 分支的版控記錄檔，只是這次要傳進公司，遠端遙控公司內部電腦操作 <code>git pull</code> 將版控記錄檔合併到 <code>Develop</code> 分支，驗測無誤後再 PR 合併至 <code>master</code> 分支  </li>
</ul>
</li>
</ul>
<p>接下來說實作，有興趣的人請繼續看下去</p>
<a id="more"></a>

<h2 id="實作方式"><a href="#實作方式" class="headerlink" title="實作方式"></a>實作方式</h2><h3 id="私有-Git-遠端儲存庫"><a href="#私有-Git-遠端儲存庫" class="headerlink" title="私有 Git 遠端儲存庫"></a>私有 Git 遠端儲存庫</h3><p>這個做法就不說明了，有免費的、付費的、私有自架的…路很多條，任君挑選。</p>
<p>接下來，為了節省大家寶貴的時間，先說個人推薦的 <code>git bundle</code> 實作方式</p>
<h3 id="用-git-bundle-產生版控記錄檔-★-推薦"><a href="#用-git-bundle-產生版控記錄檔-★-推薦" class="headerlink" title="用 git bundle 產生版控記錄檔 (★ 推薦)"></a>用 git bundle 產生版控記錄檔 (★ 推薦)</h3><p>先把時光回朔到公司開始實施 <strong>Work From Home</strong>，並且 Sam 和 Jack 都在自己的本地分支修改過檔案的狀態</p>
<p>  <img src="/2021/05/29/Git_what_is_the_difference_between_format-patch_and_bundle/image009.png" alt="image009.png" title="image009.png"></p>
<p>先從 Sam 的角度開始，假設 Sam 已經完成自己負責的功能開發，準備要將完成的結果 <code>Develop</code> 分支 push 給 Jack，但現在沒有遠端儲存庫可以 push，所以改用 <code>git bundle</code> 來實現離線同步。</p>
<p>從 Sam 的本地版控記錄可看到 Jack 在 <code>Develop</code> 分支有 commit <code>e3251c8</code>，這是雙方 <code>Develop</code> 分支都有的 commit 可以作為合併的基準點。</p>
<p>Sam 透過 <code>git bundle</code> 產生從 <code>e3251c8</code> 到本地分支 <code>Develop</code> 範圍的版控記錄檔，檔案命名為 <code>Develop_FromSam</code>，檔案會產生在工作目錄內，將這個檔案交給 Jack。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git bundle create Develop_FromSam e3251c8..Develop</span><br></pre></td></tr></table></figure>

<p>  <img src="/2021/05/29/Git_what_is_the_difference_between_format-patch_and_bundle/image011.png" alt="image011.png" title="image011.png"></p>
<p>Jack 收到檔案 <code>Develop_FromSam</code> 先用 <code>git bundle verify</code> 檢查檔案內容</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git bundle verify Develop_FromSam</span><br></pre></td></tr></table></figure>

<p>圖中可看到，此檔案內含 <code>Develop</code> 分支的版控記錄，並且只要本地端有 commit  <code>e3251c8</code> 就可以進行 <code>git pull</code> 合併。</p>
<p>  <img src="/2021/05/29/Git_what_is_the_difference_between_format-patch_and_bundle/image013.png" alt="image013.png" title="image013.png"></p>
<p>把 <code>Develop_FromSam</code> 檔案想像是一個遠端儲存庫，裡面有一個 <code>Develop</code> 遠端分支。  </p>
<p>Jack 現在想把遠端 <code>Develop</code> 分支 pull 合併到本地的 <code>Develop</code> 分支。  </p>
<p>和平常 pull 流程一樣，<u><strong>先 checkout 到本地 Develop 分支</strong></u>，再 <code>git pull</code> 遠端儲存庫的 <code>Develop</code> 分支。  </p>
<p><strong>如果 checkout 錯分支，這個 <code>git pull</code> 會合併到錯的分支上，這和平常 pull 行為是一樣的，只是現在遠端儲存庫換成版控記錄檔。</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git checkout Develop</span><br><span class="line">git pull Develop_FromSam Develop</span><br></pre></td></tr></table></figure>

<p>因為 Sam 在遠端 <code>Develop</code> 分支和 Jack 在本地都修改到同一個 <code>README.md</code> 檔案，此時合併發生衝突進入 <strong><em>MERGING</em></strong> 狀態。</p>
<p>  <img src="/2021/05/29/Git_what_is_the_difference_between_format-patch_and_bundle/image015.png" alt="image015.png" title="image015.png"></p>
<p>透過 <code>git status</code> 或 <code>git status -s</code> 確認發生衝突的是 <code>README.md</code> 檔案，下圖 Untracked files <code>Develop_FromSam</code> 檔案可以無視，這個檔案在 <code>git pull</code> 合併完成後就可以刪掉了。</p>
<p>  <img src="/2021/05/29/Git_what_is_the_difference_between_format-patch_and_bundle/image017.png" alt="image017.png" title="image017.png"></p>
<p>打開 <code>README.md</code> 看到 Git 版控提示的衝突內容</p>
<p>  <img src="/2021/05/29/Git_what_is_the_difference_between_format-patch_and_bundle/image019.png" alt="image019.png" title="image019.png"></p>
<p>修正衝突並存檔</p>
<p>  <img src="/2021/05/29/Git_what_is_the_difference_between_format-patch_and_bundle/image021.png" alt="image021.png" title="image021.png"></p>
<p>將修正的 <code>README.md</code> 檔案加入 git 索引，再透過 <code>git commit</code> 提交，合併完成了</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git add README.md</span><br><span class="line">git commit</span><br></pre></td></tr></table></figure>

<p>  <img src="/2021/05/29/Git_what_is_the_difference_between_format-patch_and_bundle/image023.png" alt="image023.png" title="image023.png"></p>
<p>Jack 的合併已經完成，因為有修正衝突，所以合併會產生新的 commit，將合併後的本地 <code>Develop</code> 分支也透過 <code>git bundle</code> 輸出版控記錄檔 <code>Develop_FromJack</code> 給 Sam 離線同步用。  </p>
<p><strong>上面這一步可以想成是原本在做 <code>git push</code> 的動作，只是目前沒有 Git 遠端儲存庫可以 <code>git push</code>，所以這類動作現在都改用 <code>git bundle</code> 代替</strong></p>
<p>從 Jack 的本地版控記錄可看到 Sam 在 <code>Develop</code> 分支有 commit <code>e3251c8</code>，這是雙方 <code>Develop</code> 分支都有的 commit 可以作為合併的基準點。</p>
<p>Jack 透過 <code>git bundle</code> 產生從 <code>e3251c8</code> 到本地分支 <code>Develop</code> 範圍的版控記錄檔，檔案命名為 <code>Develop_FromJack</code>，檔案會產生在工作目錄內，將這個檔案交給 Sam。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git bundle create Develop_FromJack e3251c8..Develop</span><br></pre></td></tr></table></figure>

<p>  <img src="/2021/05/29/Git_what_is_the_difference_between_format-patch_and_bundle/image025.png" alt="image025.png" title="image025.png"></p>
<p>Sam 收到檔案後先確認版控記錄檔內是否有 <code>Develop</code> 遠端分支和合併時必要的 commit <code>e3251c8</code>  </p>
<p>因為 Jack 已經解決合併衝突，所以 Sam 的本地 <code>Develop</code> 分支直接 <code>git pull</code> 就完成合併了，此時 Sam 與 Jack 的 <code>Develop</code> 分支記錄都是一致的。  </p>
<p><strong>小提醒：<code>git pull</code> 前要記得切對分支，此例 Sam 要 <code>checkout Develop</code></strong></p>
<p>完成後即可將 <code>Develop_FromJack</code> 檔案刪除。</p>
<p>  <img src="/2021/05/29/Git_what_is_the_difference_between_format-patch_and_bundle/image027.png" alt="image027.png" title="image027.png"></p>
<p>下圖可見，現在 Sam 和 Jack 的版控記錄是一致的，如果要送進公司上版，也可以直接把 <code>Develop_FromJack</code> 檔案傳進公司，再遠端遙控公司內部電腦透過 <code>git pull</code> 把 <code>Develop</code> 合併進去上版。  </p>
<p>因為大家的版控記錄都是維持同步的狀態，將來 <strong>Work From Home</strong> 結束，回公司連上內部儲存庫，也是無縫銜接。</p>
<p>  <img src="/2021/05/29/Git_what_is_the_difference_between_format-patch_and_bundle/image029.png" alt="image029.png" title="image029.png"></p>
<p>接下來說明如何實作 <code>git format-patch</code>，但這個做法我不推薦，不想看的人可以直接跳過。</p>
<h3 id="用-git-format-patch-產生內容修補檔-不建議開發用"><a href="#用-git-format-patch-產生內容修補檔-不建議開發用" class="headerlink" title="用 git format-patch 產生內容修補檔 (不建議開發用)"></a>用 git format-patch 產生內容修補檔 (不建議開發用)</h3><p>先把時光回朔到公司開始實施 <strong>Work From Home</strong>，並且 Sam 和 Jack 都在自己的本地分支修改過檔案的狀態</p>
<p>  <img src="/2021/05/29/Git_what_is_the_difference_between_format-patch_and_bundle/image031.jpg" alt="image031.jpg" title="image031.jpg"></p>
<p>Sam 使用 <code>git format-patch</code> 產生 <code>e3251c8</code> 到 <code>4df1ae8</code> 之間的內容修補檔，並指定檔案輸出的目錄路徑 <code>D:/Temp/GitTest/Develop_PatchFromSam/</code></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git format-patch e3251c8..<span class="number">4</span>df1ae8 -o <span class="regexp">/d/</span>Temp<span class="regexp">/GitTest/</span>Develop_PatchFromSam<span class="regexp">/</span></span><br></pre></td></tr></table></figure>

<p>目錄 <code>D:/Temp/GitTest/Develop_PatchFromSam/</code> 內產生了兩個修補檔，傳送給 Jack</p>
<p>  <img src="/2021/05/29/Git_what_is_the_difference_between_format-patch_and_bundle/image032.png" alt="image032.png" title="image032.png"></p>
<p>Jack 收到 Sam 給的內容修補檔，使用 <code>git am</code> 將修補內容 commit 至本地的 <code>Develop</code> 分支</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git am [修補檔路徑]</span><br></pre></td></tr></table></figure>

<p>因為雙方 <code>Develop</code> 分支的 <code>README.md</code> 檔案都有修改，發生衝突了  </p>
<p>聰明的 Sam 早早寫完先交付就沒事了，寫得慢的 Jack 就要解衝突，陷入被越拖越慢的惡性循環 <span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8">&#x1f606;</span></p>
<p>  <img src="/2021/05/29/Git_what_is_the_difference_between_format-patch_and_bundle/image034.png" alt="image034.png" title="image034.png"></p>
<p>見下圖右上方，目前狀態進入 <strong><em>Develop|AM</em></strong> 處理模式了，倒楣的 Jack 先看看是什麼造成衝突</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git am --show-current-patch=diff</span><br></pre></td></tr></table></figure>

<p>  <img src="/2021/05/29/Git_what_is_the_difference_between_format-patch_and_bundle/image036.png" alt="image036.png" title="image036.png"></p>
<p>把造成衝突，缺少的內容補進 <code>README.md</code>，並存檔</p>
<p>  <img src="/2021/05/29/Git_what_is_the_difference_between_format-patch_and_bundle/image038.png" alt="image038.png" title="image038.png"></p>
<p>把修改的結果加入 git 索引</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>

<p>問題排除，繼續執行 AM</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git am --<span class="keyword">continue</span></span><br></pre></td></tr></table></figure>

<p>第二個修補檔也發生衝突了，Jack 在心裡咒罵 Sam</p>
<p>  <img src="/2021/05/29/Git_what_is_the_difference_between_format-patch_and_bundle/image040.png" alt="image040.png" title="image040.png"></p>
<p>再看看這次的衝突原因</p>
<p>  <img src="/2021/05/29/Git_what_is_the_difference_between_format-patch_and_bundle/image042.png" alt="image042.png" title="image042.png"></p>
<p>再次把造成衝突，缺少的內容補進 <code>README.md</code> 並存檔</p>
<p>  <img src="/2021/05/29/Git_what_is_the_difference_between_format-patch_and_bundle/image044.png" alt="image044.png" title="image044.png"></p>
<p>把修改的結果加入 git 索引</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>

<p>問題排除，繼續執行 AM</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git am --<span class="keyword">continue</span></span><br></pre></td></tr></table></figure>

<p>見圖右方 <strong><em>Develop|AM</em></strong> 狀態結束，總算合併完成了</p>
<p>  <img src="/2021/05/29/Git_what_is_the_difference_between_format-patch_and_bundle/image046.png" alt="image046.png" title="image046.png"></p>
<p>現在 Jack 本地 <code>Develop</code> 分支多了兩個 commit 將 Sam 修改的內容併進來了</p>
<p>  <img src="/2021/05/29/Git_what_is_the_difference_between_format-patch_and_bundle/image048.png" alt="image048.png" title="image048.png"></p>
<p>等等，做到這邊，有人注意到 Sam 還沒拿到 Jack 合併後的結果嗎？  </p>
<p>所以 Jack 要再 <code>git format-patch</code> 產生 <code>Develop</code> 分支的修補檔回去給 Sam  </p>
<p>而 Sam 將 Jack 給的修補檔再透過 <code>git am</code> 合併到自己本地 <code>Develop</code> 分支，又再產生新的 commit，大家的版控記錄越來越不一致…  </p>
<p><strong>在可以連到遠端儲存庫同步之前，大家的 Commit ID 都對不起來，有時會造成溝通或追查問題的困難</strong>，即使連到遠端儲存庫了，也免不了要再解決合併衝突  </p>
<p>由此看來 <code>git format-patch</code> 並不適合開發過程的版控交換用途，他的重點是檔案的修補，做為交付修補程式的一種方式，而非版控記錄</p>
<p>  <img src="/2021/05/29/Git_what_is_the_difference_between_format-patch_and_bundle/image050.png" alt="image050.png" title="image050.png"></p>
<p>以上是小弟個人的理解和實務操作經驗分享，如果有錯誤的地方還請不吝指點，謝謝  <span class="github-emoji" style="background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f60a.png?v8)" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60a.png?v8">&#x1f60a;</span></p>
]]></content>
      <categories>
        <category>工作雜記</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>使用正規表達式解析 Fortify 產出的 PDF 文件數據</title>
    <url>/2020/11/22/Regular_Expression_Fortify_Report_PDF/</url>
    <content><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>目前工作的開發環境有用 CI/CD，且會執行 Fortify 掃描網站弱點，PM 要手動將 Fortify 產出的 PDF 表格數據整理到 Word 文件，他希望這種重覆性質的工作可以做成自動化，本文主要是記錄如何將 PDF 文件內表格數據解析出來的過程。</p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ol>
<li>使用 IFilterTextReader (NuGet 套件) 讀取 PDF 文件</li>
<li>使用正規表達式將表格數據解析成資料集合的物件</li>
<li>將資料集合填入到 Word 文件 (本文不會實作)</li>
</ol>
<a id="more"></a>

<h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><h3 id="PDF-文件內容"><a href="#PDF-文件內容" class="headerlink" title="PDF 文件內容"></a>PDF 文件內容</h3><p>  紅框是這次要取出的表格數據</p>
<p>  <img src="/2020/11/22/Regular_Expression_Fortify_Report_PDF/01_PDF.png" alt="01 PDF 內容" title="01 PDF 內容"></p>
<h3 id="安裝-NuGet-套件"><a href="#安裝-NuGet-套件" class="headerlink" title="安裝 NuGet 套件"></a>安裝 NuGet 套件</h3><p>  安裝 IFilterTextReader</p>
<p>  <img src="/2020/11/22/Regular_Expression_Fortify_Report_PDF/02_NuGet.png" alt="02 IFilterTextReader" title="02 IFilterTextReader"></p>
<h3 id="使用-IFilterTextReader-讀取-PDF-文件"><a href="#使用-IFilterTextReader-讀取-PDF-文件" class="headerlink" title="使用 IFilterTextReader 讀取 PDF 文件"></a>使用 IFilterTextReader 讀取 PDF 文件</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> IFilterTextReader;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 讀取 PDF</span></span><br><span class="line"><span class="keyword">string</span> filePath = <span class="string">@"X:\SomeWhere\Fortify.pdf"</span>;</span><br><span class="line"><span class="keyword">string</span> source = <span class="keyword">new</span> IFilterTextReader.FilterReader(filePath).ReadToEnd();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 輸出檢視讀取的文件內容</span></span><br><span class="line">Console.WriteLine(source);</span><br></pre></td></tr></table></figure>

<p>  PDF 讀取出來的內容被轉換成純文字了，這次需要的表格數據部份如下</p>
<p>  <img src="/2020/11/22/Regular_Expression_Fortify_Report_PDF/03_String.png" alt="03 表格數據的字串" title="03 表格數據的字串"></p>
<h3 id="使用正規表達式解析內容"><a href="#使用正規表達式解析內容" class="headerlink" title="使用正規表達式解析內容"></a>使用正規表達式解析內容</h3><p>  將關鍵片段手動排版一下，以便思考該怎麼寫正規表達式的 pattern</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A1 Injection 0 21 0 1 22 1.2</span><br><span class="line">A2 Broken Authentication and Session Management 0 1 0 0 1 0.2</span><br><span class="line">A3 Cross-Site Scripting (XSS) 0 8 0 0 8 0.2</span><br><span class="line">A4 Insecure Direct Object References 0 40 0 12 52 3.2</span><br><span class="line">A5 Security Misconfiguration 1 0 3 0 4 0.5</span><br><span class="line">A6 Sensitive Data Exposure 3 19 0 0 22 1.8</span><br><span class="line">A7 Missing Function Level Access Control 0 0 0 0 0 0.0</span><br><span class="line">A8 Cross-Site Request Forgery (CSRF) 0 0 0 0 0 0.0</span><br><span class="line">A9 Using Components with Known Vulnerabilities 0 0 0 0 0 0.0</span><br><span class="line">A10 Unvalidated Redirects and Forwards 0 0 0 0 0 0.0</span><br></pre></td></tr></table></figure>

<h4 id="找出文字的固定規律"><a href="#找出文字的固定規律" class="headerlink" title="找出文字的固定規律"></a>找出文字的固定規律</h4><p>A3 的標題帶有特殊符號，為相對複雜的情況，故以 A3 為例。</p>
<p>這裡先訂出需要用到的幾個欄位名稱，並針對每個欄位會出現的內容做分析，決定出每個欄位要使用的正規表達式 pattern。</p>
<ul>
<li>IssueName: <b>A3 Cross-Site Scripting (XSS)</b><br>字串開頭固定為 <b>A流水號</b>，內容可能會有多組英、數組成的單字，每個單字間用空白分隔，且可能會有 <b>-</b>, <b>(</b>, <b>)</b> 等符號<br>給正規表達式用的 Pattern: <b>\bA\d+\b [a-zA-Z0-9 \-\(\)]+</b>  </li>
<li>Critical: <b>0</b><br><b>正整數</b><br>給正規表達式用的 Pattern: <b>\b\d+\b</b>  </li>
<li>High: <b>8</b><br><b>正整數</b><br>給正規表達式用的 Pattern: <b>\b\d+\b</b>  </li>
<li>Medium: <b>0</b><br><b>正整數</b><br>給正規表達式用的 Pattern: <b>\b\d+\b</b>  </li>
<li>Low: <b>0</b><br><b>正整數</b><br>給正規表達式用的 Pattern: <b>\b\d+\b</b>  </li>
<li>TotalIssues: <b>8</b><br><b>正整數</b><br>給正規表達式用的 Pattern: <b>\b\d+\b</b>  </li>
<li>Effort: <b>0.2</b><br><b>浮點數</b>，且即使為 0 也會顯示為 0.0<br>給正規表達式用的 Pattern: <b>\b\d+\.\d+\b</b>  </li>
</ul>
<p>對正規表達式 pattern 特殊字元不熟的人可以參考本文結尾的參考資料</p>
<h4 id="建立用來存放解析結果的資料類別"><a href="#建立用來存放解析結果的資料類別" class="headerlink" title="建立用來存放解析結果的資料類別"></a>建立用來存放解析結果的資料類別</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用來存放解析結果的資料類別</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">DataColumn</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> IssueName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Critical &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> High &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Medium &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Low &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> TotalIssues &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Effort &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="進行解析並存入結果資料集合物件"><a href="#進行解析並存入結果資料集合物件" class="headerlink" title="進行解析並存入結果資料集合物件"></a>進行解析並存入結果資料集合物件</h4><p>用前面準備好的 Pattern 加上正規表達式 <b>群組命名</b> 的寫法，以便後面將取出的資料以 <b>群組名稱</b> 的方式對應到資料物件</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> IFilterTextReader;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存放解析結果用的資料集合</span></span><br><span class="line">List&lt;DataColumn&gt; dataList = <span class="keyword">new</span> List&lt;DataColumn&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 讀取 PDF</span></span><br><span class="line"><span class="keyword">string</span> filePath = <span class="string">@"X:\SomeWhere\Fortify.pdf"</span>;</span><br><span class="line"><span class="keyword">string</span> source = <span class="keyword">new</span> IFilterTextReader.FilterReader(filePath).ReadToEnd();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析用 Pattern</span></span><br><span class="line"><span class="keyword">string</span> pattern = <span class="string">@"(?'IssueName'\bA\d+\b [a-zA-Z0-9 \-\(\)]+) (?'Critical'\b\d+\b) (?'High'\b\d+\b) (?'Medium'\b\d+\b) (?'Low'\b\d+\b) (?'TotalIssues'\b\d+\b) (?'Effort'\b\d+\.\d+\b)"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析成集合物件</span></span><br><span class="line">MatchCollection matches = Regex.Matches(source, pattern);</span><br><span class="line"><span class="keyword">if</span> (matches.Count &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 從解析集合物件逐筆填入解析結果到資料集合</span></span><br><span class="line">  <span class="keyword">foreach</span> (Match match <span class="keyword">in</span> matches)</span><br><span class="line">  &#123;</span><br><span class="line">    dataList.Add(</span><br><span class="line">      <span class="keyword">new</span> DataColumn</span><br><span class="line">      &#123;</span><br><span class="line">        IssueName = match.Groups[<span class="string">"IssueName"</span>].ToString(),</span><br><span class="line">        Critical = match.Groups[<span class="string">"Critical"</span>].ToString(),</span><br><span class="line">        High = match.Groups[<span class="string">"High"</span>].ToString(),</span><br><span class="line">        Medium = match.Groups[<span class="string">"Medium"</span>].ToString(),</span><br><span class="line">        Low = match.Groups[<span class="string">"Low"</span>].ToString(),</span><br><span class="line">        TotalIssues = match.Groups[<span class="string">"TotalIssues"</span>].ToString(),</span><br><span class="line">        Effort = match.Groups[<span class="string">"Effort"</span>].ToString(),</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 顯示解析結果的資料集合</span></span><br><span class="line">  dataList.Dump(); <span class="comment">// (此為 LINQPad 的方法，輸出結果如下圖)</span></span><br><span class="line">&#125;</span><br><span class="line">Console.WriteLine(<span class="string">"執行結束"</span>);</span><br></pre></td></tr></table></figure>

<h4 id="用-LINQPad-檢視解析結果資料集合"><a href="#用-LINQPad-檢視解析結果資料集合" class="headerlink" title="用 LINQPad 檢視解析結果資料集合"></a>用 LINQPad 檢視解析結果資料集合</h4><p>  <img src="/2020/11/22/Regular_Expression_Fortify_Report_PDF/04_Result.png" alt="04 解析出來的資料集合" title="04 解析出來的資料集合"></p>
<p>感謝正規表達式讓我們快速完成需求，收工！</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><blockquote>
<ul>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="noopener">MDN</a><br>有正規表達式特殊字元的解釋、使用範例</li>
<li><a href="https://regex101.com/" target="_blank" rel="noopener">Regex101 正規表達式視覺化、說明</a><br>提供正規表達式視覺化的線上工具，畫面上也提供特殊字元的說明</li>
<li><a href="https://blog.kalan.dev/2020-10-20-how-to-add-comma-into-number/" target="_blank" rel="noopener">將數字加上 comma 的正規表達式說明</a><br>這篇文章對 \b (word boundary) 有很好的解釋，個人認為掌握 word boundary 的用法，可提升正規表達式比對的正確性</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>工作雜記</category>
      </categories>
      <tags>
        <tag>Regular Expression</tag>
        <tag>CSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Pandoc 將 Markdown 轉為 PDF 文件</title>
    <url>/2020/01/13/%E4%BD%BF%E7%94%A8%20Pandoc%20%E5%B0%87%20Markdown%20%E8%BD%89%E7%82%BA%20PDF%20%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="什麼是-Pandoc"><a href="#什麼是-Pandoc" class="headerlink" title="什麼是 Pandoc"></a>什麼是 Pandoc</h2><p>Pandoc 是功能很強的文件轉換器，可以將各種文件格式互轉</p>
<p><strong>感謝 <em>Will 保哥</em> 這篇文章的啟蒙</strong>  </p>
<blockquote>
<p><a href="https://blog.miniasp.com/post/2018/10/06/Useful-tool-Pandoc-universal-document-converter" target="_blank" rel="noopener">介紹好用工具：Pandoc ( 萬用的文件轉換器 )</a></p>
</blockquote>
<h2 id="準備環境"><a href="#準備環境" class="headerlink" title="準備環境"></a>準備環境</h2><ul>
<li>安裝 <a href="https://pandoc.org/" target="_blank" rel="noopener">Pandoc</a> : 功能強的萬用文件轉換器</li>
<li>安裝 <a href="https://miktex.org/" target="_blank" rel="noopener">MiKTeX</a> : 在 Pandoc 轉檔時會自動安裝缺少的套件 (例如處理中文字就需要 cjk 套件)</li>
</ul>
<a id="more"></a>

<hr>
<h2 id="YAML-metadata-區塊"><a href="#YAML-metadata-區塊" class="headerlink" title="YAML metadata 區塊"></a>YAML metadata 區塊</h2><p>在 markdown 開頭寫 YAML metadata 區塊，依此區塊用到的不同參數，會對應 template 格式檔而輸出至文件指定的位置，如：頁首、頁尾、字體格式等。</p>
<p><a id="markdown-YAML的mainfont參數" name="YAML的mainfont參數"></a></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">使用</span> <span class="string">Pandoc</span> <span class="string">將</span> <span class="string">Markdown</span> <span class="string">轉為</span> <span class="string">PDF</span> <span class="string">文件</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Sam</span> <span class="string">Chuang</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">"2020-01-13"</span></span><br><span class="line"><span class="attr">CJKmainfont:</span> <span class="string">"Microsoft YaHei Mono"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<h3 id="YAML-metadata-參數"><a href="#YAML-metadata-參數" class="headerlink" title="YAML metadata 參數"></a>YAML metadata 參數</h3><ul>
<li><p><strong>CJKmainfont</strong><br>  指定中文字型檔，預設為 SourceSansPro-Bold.otf 字型 (不支援中文字)<br>  若文件內有中文字，必須在 YAML metadata 區塊加上中文字型的指定，否則會轉檔失敗。<br>  <span style="color:#ff0000"><strong>準確一點的說法：指定的字型檔必須包含文件內所有用到的字元</strong></span><br>  也就是，若輸入 Unicode 的 emoji 字元，而字型檔內沒有此 emoji 字元，一樣會出錯。</p>
<p>  <strong>參考資料</strong></p>
<blockquote>
<p><a href="https://github.com/jgm/pandoc/wiki/Pandoc-with-Chinese" target="_blank" rel="noopener">Pandoc with Chinese</a></p>
</blockquote>
</li>
</ul>
<h3 id="YAML-metadata-其他參數"><a href="#YAML-metadata-其他參數" class="headerlink" title="YAML metadata 其他參數"></a>YAML metadata 其他參數</h3><blockquote>
<p><a href="https://pandoc.org/MANUAL.html#templates" target="_blank" rel="noopener">官方文件 (Pandoc User’s Guide - Templates)</a>  </p>
</blockquote>
<hr>
<h2 id="執行-Pandoc-指令轉檔"><a href="#執行-Pandoc-指令轉檔" class="headerlink" title="執行 Pandoc 指令轉檔"></a>執行 Pandoc 指令轉檔</h2><p>在 Terminal 或 PowerShell 或 CMD 輸入 Pandoc 指令</p>
<p><b><code>Linux</code></b></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">pandoc <span class="string">'example.md'</span> <span class="literal">-o</span> <span class="string">'example.pdf'</span> -<span class="literal">-latex</span><span class="literal">-engine</span>=xelatex -<span class="literal">-toc</span> -<span class="literal">-toc</span><span class="literal">-depth</span>=<span class="number">4</span></span><br></pre></td></tr></table></figure>

<p><b><code>Windows</code></b></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">pandoc <span class="string">'example.md'</span> <span class="literal">-o</span> <span class="string">'example.pdf'</span> -<span class="literal">-pdf</span><span class="literal">-engine</span>=xelatex -<span class="literal">-toc</span> -<span class="literal">-toc</span><span class="literal">-depth</span>=<span class="number">4</span></span><br></pre></td></tr></table></figure>

<h3 id="指令參數說明"><a href="#指令參數說明" class="headerlink" title="指令參數說明"></a>指令參數說明</h3><ul>
<li><code>-o &#39;example.pdf&#39;</code><br>  輸出檔名</li>
<li><code>--latex-engine=xelatex</code> 或 <code>--pdf-engine=xelatex</code><br>  指定 LaTeX engine 使用 xelatex 製作 PDF  </li>
<li><code>--toc</code><br>  用 markdown 的標題在 PDF 內產生 Table of Contents 目錄，同時加上頁碼和連結</li>
<li><code>--toc-depth=NUMBER</code><br>  Table of Contents 目錄要包含多少層的 markdown 標題<br>  NUMBER 可設定的值為 1~6 (預設為 3)</li>
</ul>
<h3 id="指令參數參考"><a href="#指令參數參考" class="headerlink" title="指令參數參考"></a>指令參數參考</h3><blockquote>
<ul>
<li><a href="https://pandoc.org/MANUAL.html#options" target="_blank" rel="noopener">官方文件 (Pandoc User’s Guide - Options)</a>  </li>
<li><a href="https://pandoc.org/demos.html" target="_blank" rel="noopener">Pandoc 官網轉換各種文件的範例</a></li>
</ul>
</blockquote>
<hr>
<h2 id="輸出樣式"><a href="#輸出樣式" class="headerlink" title="輸出樣式"></a>輸出樣式</h2><ol>
<li><h3 id="預設樣式"><a href="#預設樣式" class="headerlink" title="預設樣式"></a>預設樣式</h3><p> 執行轉檔指令沒有指定 template 樣式會以預設格式輸出，預設格式不會針對 markdown 每個語法去對應不同字型、顏色、格式，因此輸出的文件版面不美觀，甚至可能會遇到中文段落的文字不會自動換行，或超出版面的問題，最顯而易見的是邊界空白區就佔了將近版面 40%。</p>
</li>
<li><h3 id="使用-LaTeX-template-自訂樣式"><a href="#使用-LaTeX-template-自訂樣式" class="headerlink" title="使用 LaTeX template 自訂樣式"></a>使用 LaTeX template 自訂樣式</h3><p> 可依需求自行撰寫 LaTeX template 的樣式檔，輸出時只要指定使用此樣式檔，只要樣式檔沒寫錯，就會照我們預期的版面樣式輸出。</p>
<p> 若想自訂樣式檔，可參考 LaTeX template 的寫法  </p>
<blockquote>
<ul>
<li><a href="https://github.com/jgm/pandoc/wiki/Pandoc-Tricks#using-markdown-templates" target="_blank" rel="noopener">Using Markdown Templates</a>  </li>
<li><a href="https://pandoc.org/MANUAL.html#variables-for-latex" target="_blank" rel="noopener">官方文件 (Pandoc User’s Guide - Variables for LaTeX)</a></li>
</ul>
</blockquote>
</li>
<li><h3 id="使用-Eisvogel-LaTeX-template-樣式"><a href="#使用-Eisvogel-LaTeX-template-樣式" class="headerlink" title="使用 Eisvogel LaTeX template 樣式"></a>使用 Eisvogel LaTeX template 樣式</h3><p> 自製 LaTeX template 樣式輸出的格式最完美，但也是最曠日費時的做法，人生短暫，我們可以使用別人寫好現成的 LaTex template，把省下的時間用來創造更美好的事物，這裡選用開源專案的 Eisvogel LaTeX template。</p>
</li>
</ol>
<ul>
<li><h4 id="下載-Eisvogel-LaTex-template"><a href="#下載-Eisvogel-LaTex-template" class="headerlink" title="下載 Eisvogel LaTex template"></a>下載 Eisvogel LaTex template</h4><ol>
<li><p><a href="https://github.com/Wandmalfarbe/pandoc-latex-template/releases/latest" target="_blank" rel="noopener">Eisvogel LaTex template</a>  </p>
</li>
<li><p>解壓縮 Zip  </p>
</li>
<li><p>將裡面的 <code>eisvogel.tex</code> 複製到 pandoc templates 目錄，並改名為 <code>eisvogel.latex</code>，pandoc templates 的路徑為  </p>
<p> <a id="markdown-Template預設目錄" name="Template預設目錄"></a></p>
<ul>
<li><p>Unix、Linux、macOS :<br>  <code>/Users/USERNAME/.local/share/pandoc/templates/</code><br>  或<br>  <code>/Users/USERNAME/.pandoc/templates/</code></p>
</li>
<li><p>Windows :<br>  <code>C:\Users\USERNAME\AppData\Roaming\pandoc\templates\</code>  </p>
<p>如果目錄不存在，請自己建立</p>
</li>
</ul>
</li>
</ol>
</li>
<li><h4 id="使用-Eisvogel-LaTeX-template"><a href="#使用-Eisvogel-LaTeX-template" class="headerlink" title="使用 Eisvogel LaTeX template"></a>使用 Eisvogel LaTeX template</h4><p>  在 Terminal 或 PowerShell 或 CMD 輸入 Pandoc 指令</p>
<p>  <b><code>Linux</code></b></p>
  <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">pandoc <span class="string">'example.md'</span> <span class="literal">-o</span> <span class="string">'example.pdf'</span> -<span class="literal">-latex</span><span class="literal">-engine</span>=xelatex -<span class="literal">-toc</span> -<span class="literal">-from</span> markdown -<span class="literal">-template</span> eisvogel -<span class="literal">-listings</span></span><br></pre></td></tr></table></figure>

<p>  <b><code>Windows</code></b></p>
  <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">pandoc <span class="string">'example.md'</span> <span class="literal">-o</span> <span class="string">'example.pdf'</span> -<span class="literal">-pdf</span><span class="literal">-engine</span>=xelatex -<span class="literal">-toc</span> -<span class="literal">-from</span> markdown -<span class="literal">-template</span> eisvogel -<span class="literal">-listings</span></span><br></pre></td></tr></table></figure>

<h4 id="指令參數說明-使用-template"><a href="#指令參數說明-使用-template" class="headerlink" title="指令參數說明 (使用 template)"></a>指令參數說明 (使用 template)</h4><ul>
<li><code>--from markdown</code><br>  指定來源為 markdown 格式</li>
<li><code>--template eisvogel</code><br>  指定要使用的 template 樣式檔<br>  此例會到 <a href="#Template預設目錄">Template 預設目錄</a> 找eisvogel.latex</li>
<li><code>--listings</code><br>  用來處理 LaTeX code block 的 listings 套件</li>
</ul>
</li>
<li><h4 id="指令參數參考資料"><a href="#指令參數參考資料" class="headerlink" title="指令參數參考資料"></a>指令參數參考資料</h4><ul>
<li><a href="http://xiaodc.github.io/%E6%8A%80%E6%9C%AF%E5%8D%9A%E6%96%87/2019/09/08/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-pandoc-%E5%92%8C-latex-%E5%88%B6%E4%BD%9C%E6%BC%82%E4%BA%AE%E7%9A%84-pdf/" target="_blank" rel="noopener">如何使用 pandoc 和 LaTeX 製作漂亮的 pdf</a>  </li>
<li><a href="https://github.com/Wandmalfarbe/pandoc-latex-template" target="_blank" rel="noopener">Eisvogel - A pandoc LaTeX template to convert markdown files to PDF or LaTeX.</a></li>
</ul>
</li>
</ul>
<h3 id="4-Eisvogel-LaTeX-template-透過-YAML-metadata-使用自訂變數-進階用法"><a href="#4-Eisvogel-LaTeX-template-透過-YAML-metadata-使用自訂變數-進階用法" class="headerlink" title="4. Eisvogel LaTeX template 透過 YAML metadata 使用自訂變數 (進階用法)"></a>4. Eisvogel LaTeX template 透過 YAML metadata 使用自訂變數 <span style="color:#ff0000">(進階用法)</span></h3><p>Eisvogel LaTeX template 有預留參數，可透過 markdown 的 YAML metadata 自訂變數傳入 template  </p>
<p><strong><span style="color:#ff0000">在 YAML metadata 設定 template 預留的自訂變數，可在不修改 template 檔的情況下調整輸出版面</span></strong></p>
<p>例如輸出時加入封面、指定各種 markdown 語法對應的字型格式設定、…等</p>
<h4 id="YAML-metadata-使用自訂變數參考資料"><a href="#YAML-metadata-使用自訂變數參考資料" class="headerlink" title="YAML metadata 使用自訂變數參考資料"></a>YAML metadata 使用自訂變數參考資料</h4><blockquote>
<p><a href="https://github.com/Wandmalfarbe/pandoc-latex-template#custom-template-variables" target="_blank" rel="noopener">Eisvogel GitHub Repo 說明 - Custom Template Variables</a></p>
</blockquote>
<hr>
<h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><p>點擊範例檔名連結可下載範例檔</p>
<blockquote>
<ul>
<li>若下載的範例原始檔沒看到 YAML metadata 區塊內容，就是被網站平台給過濾掉了 。  </li>
<li>YAML metadata 設定方式可參考：<a href="#YAML的mainfont參數">YAML metadata 區塊</a></li>
</ul>
</blockquote>
<h3 id="範例1-不使用-template"><a href="#範例1-不使用-template" class="headerlink" title="範例1 (不使用 template)"></a>範例1 (不使用 template)</h3><ol>
<li><p><strong>執行指令</strong></p>
 <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">pandoc <span class="string">"example.txt"</span> <span class="literal">-o</span> <span class="string">"example.pdf"</span> -<span class="literal">-pdf</span><span class="literal">-engine</span>=xelatex -<span class="literal">-toc</span> -<span class="literal">-toc</span><span class="literal">-depth</span>=<span class="number">4</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>結果 (不使用 template)</strong></p>
<ul>
<li><p><a href="example.txt">example.txt</a> 是 markdown 來源檔</p>
</li>
<li><p><a href="example.pdf">example.pdf</a> 是輸出的 PDF 檔<br>此範例未指定 template 樣式檔，使用預設輸出 ，雖然已將中文內容轉成 PDF 文件，也包含有 Table of Contents 目錄、頁碼與文章標題的書籤連結，但轉換出來的版面不完美。</p>
</li>
</ul>
</li>
</ol>
<h3 id="範例2-使用-Eisvogel-template-格式"><a href="#範例2-使用-Eisvogel-template-格式" class="headerlink" title="範例2 (使用 Eisvogel template 格式)"></a>範例2 (使用 Eisvogel template 格式)</h3><ol>
<li><p><strong>執行指令</strong></p>
 <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">pandoc <span class="string">"example.txt"</span> <span class="literal">-o</span> <span class="string">"example_with_template.pdf"</span> -<span class="literal">-pdf</span><span class="literal">-engine</span>=xelatex -<span class="literal">-toc</span> -<span class="literal">-toc</span><span class="literal">-depth</span>=<span class="number">4</span> -<span class="literal">-from</span> markdown -<span class="literal">-template</span> eisvogel -<span class="literal">-listings</span></span><br></pre></td></tr></table></figure>

<p> <code>--template eisvogel</code> 指定使用 Eisvogel template 樣式檔</p>
</li>
<li><p><strong>結果 (使用 Eisvogel template 格式)</strong></p>
<ul>
<li><p><a href="example.txt">example.txt</a> 是 markdown 來源檔，同範例1的markdown 檔</p>
</li>
<li><p><a href="example_with_template.pdf">example_with_template.pdf</a> 是輸出的 PDF 檔<br>轉換出來的版面很完美。</p>
</li>
</ul>
</li>
</ol>
<h3 id="範例3-使用-Eisvogel-template-YAML-metadata"><a href="#範例3-使用-Eisvogel-template-YAML-metadata" class="headerlink" title="範例3 (使用 Eisvogel template + YAML metadata)"></a>範例3 (使用 Eisvogel template + YAML metadata)</h3><ol>
<li><p><strong>製做封面底圖並存為 PDF 檔：<a href="background1.pdf">background1.pdf</a></strong></p>
</li>
<li><p><strong>在 YAML metadata 增加 template 預留的參數，啟用封面，並指定封面檔</strong></p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">使用</span> <span class="string">Pandoc</span> <span class="string">將</span> <span class="string">Markdown</span> <span class="string">轉為</span> <span class="string">PDF</span> <span class="string">文件</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Sam</span> <span class="string">Chuang</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">"2020-01-13"</span></span><br><span class="line"><span class="attr">CJKmainfont:</span> <span class="string">"Microsoft YaHei Mono"</span></span><br><span class="line"><span class="attr">subject:</span> <span class="string">"Pandoc 轉檔教學"</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">[Markdown,</span> <span class="string">Pandoc]</span></span><br><span class="line"><span class="attr">titlepage:</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line"><span class="attr">titlepage-rule-color:</span> <span class="string">"360049"</span></span><br><span class="line"><span class="attr">titlepage-background:</span> <span class="string">"background1.pdf"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>執行指令</strong></p>
<p> 同範例2的指令</p>
 <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">pandoc <span class="string">"example_with_template_titlepage.txt"</span> <span class="literal">-o</span> <span class="string">"example_with_template_titlepage.pdf"</span> -<span class="literal">-pdf</span><span class="literal">-engine</span>=xelatex -<span class="literal">-toc</span> -<span class="literal">-toc</span><span class="literal">-depth</span>=<span class="number">4</span> -<span class="literal">-from</span> markdown -<span class="literal">-template</span> eisvogel -<span class="literal">-listings</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>結果 (使用 Eisvogel template + YAML metadata)</strong></p>
<ul>
<li><p><a href="example_with_template_titlepage.txt">example_with_template_titlepage.txt</a> 是 markdown 來源檔</p>
</li>
<li><p><a href="example_with_template_titlepage.pdf">example_with_template_titlepage.pdf</a> 是輸出的 PDF 檔<br>轉換出來的內容有附封面，更精致了。</p>
</li>
</ul>
</li>
</ol>
<hr>
<h2 id="其他參考資料"><a href="#其他參考資料" class="headerlink" title="其他參考資料"></a>其他參考資料</h2><ul>
<li><a href="http://pages.tzengyuxio.me/pandoc/" target="_blank" rel="noopener">Pandoc’s Markdown 語法 (中文翻譯)</a></li>
<li><a href="http://project.mde.tw/blog/pandoc-markdown-ji-ben-yu-fa-jie-shao.html" target="_blank" rel="noopener">Pandoc - Markdown 基本語法介紹</a></li>
<li><a href="http://project.mde.tw/blog/pandoc-markdown-zhuan-pdf-ge-shi.html" target="_blank" rel="noopener">Pandoc - Markdown 轉 PDF 格式</a></li>
</ul>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>PDF</tag>
        <tag>Pandoc</tag>
        <tag>LaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown 常用語法整理</title>
    <url>/2020/01/10/Markdown%20%E5%B8%B8%E7%94%A8%E8%AA%9E%E6%B3%95%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h1 id="標題-H1"><a href="#標題-H1" class="headerlink" title="標題 H1"></a>標題 H1</h1><h2 id="標題-H2"><a href="#標題-H2" class="headerlink" title="標題 H2"></a>標題 H2</h2><h3 id="標題-H3"><a href="#標題-H3" class="headerlink" title="標題 H3"></a>標題 H3</h3><h4 id="標題-H4"><a href="#標題-H4" class="headerlink" title="標題 H4"></a>標題 H4</h4><h5 id="標題-H5"><a href="#標題-H5" class="headerlink" title="標題 H5"></a>標題 H5</h5><h6 id="標題-H6"><a href="#標題-H6" class="headerlink" title="標題 H6"></a>標題 H6</h6><figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="section"># 標題 H1</span></span><br><span class="line"><span class="section">## 標題 H2</span></span><br><span class="line"><span class="section">### 標題 H3</span></span><br><span class="line"><span class="section">#### 標題 H4</span></span><br><span class="line"><span class="section">##### 標題 H5</span></span><br><span class="line"><span class="section">###### 標題 H6</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>

<hr>
<h1 id="文字格式"><a href="#文字格式" class="headerlink" title="文字格式"></a>文字格式</h1><ul>
<li><h2 id="粗體字"><a href="#粗體字" class="headerlink" title="粗體字"></a>粗體字</h2><p><strong>粗體字</strong></p>
  <figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="strong">**粗體字**</span></span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line"><span class="strong">__粗體字__</span></span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="斜體字"><a href="#斜體字" class="headerlink" title="斜體字"></a>斜體字</h2><p><em>斜體字</em></p>
  <figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="emphasis">*斜體字*</span></span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line"><span class="emphasis">_斜體字_</span></span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="底線"><a href="#底線" class="headerlink" title="底線"></a>底線</h2><p><u>底線</u></p>
  <figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>底線<span class="xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="刪除線"><a href="#刪除線" class="headerlink" title="刪除線"></a>刪除線</h2><p><del>刪除線</del></p>
  <figure class="highlight md"><table><tr><td class="code"><pre><span class="line">~~刪除線~~</span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="文字凸顯"><a href="#文字凸顯" class="headerlink" title="文字凸顯"></a>文字凸顯</h2><p><code>文字凸顯</code></p>
  <figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="code">`文字凸顯`</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><blockquote>
<p>引言，若要換行，結尾要加 <code>兩個空白</code> 如 _ _<br>這是新的一行</p>
</blockquote>
  <figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 引言，若要換行，結尾要加 `兩個空白`  </span></span><br><span class="line"><span class="quote">&gt; 這是新的一行</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="連結"><a href="#連結" class="headerlink" title="連結"></a>連結</h1><ul>
<li><h2 id="網址連結"><a href="#網址連結" class="headerlink" title="網址連結"></a>網址連結</h2><p><a href="https://www.google.com" target="_blank" rel="noopener">https://www.google.com</a></p>
<p>在網址前、後加上 “&lt;” 和 “&gt;” 字元</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">https:</span>//<span class="attr">www.google.com</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="文字連結"><a href="#文字連結" class="headerlink" title="文字連結"></a>文字連結</h2><p><a href="https://www.google.com" target="_blank" rel="noopener">連結文字</a></p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">[<span class="string">連結文字</span>](<span class="link">https://www.google.com</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h1 id="圖片"><a href="#圖片" class="headerlink" title="圖片"></a>圖片</h1><p>  <img src="https://picsum.photos/id/684/600/400" alt="圖片 Alt" title="圖片 Title"></p>
  <figure class="highlight md"><table><tr><td class="code"><pre><span class="line">![<span class="string">圖片 Alt</span>](<span class="link">https://picsum.photos/id/684/600/400 "圖片 Title"</span>)</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">![](https://picsum.photos/id/684/600/400)</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="分隔線"><a href="#分隔線" class="headerlink" title="分隔線"></a>分隔線</h1>  <figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="數學公式-GitHub-不支援"><a href="#數學公式-GitHub-不支援" class="headerlink" title="數學公式 (GitHub 不支援)"></a>數學公式 <strong><em>(GitHub 不支援)</em></strong></h1><blockquote>
<p>語法參考 <a href="https://mhchem.github.io/MathJax-mhchem" target="_blank" rel="noopener">https://mhchem.github.io/MathJax-mhchem</a></p>
</blockquote>
<p>  $f(x)=10$</p>
  <figure class="highlight md"><table><tr><td class="code"><pre><span class="line">$f(x)=10$</span><br></pre></td></tr></table></figure>

<p>  $\ce{$K = \frac{[\ce{Hg^2+}][\ce{Hg}]}{[\ce{Hg2^2+}]}$}$</p>
  <figure class="highlight md"><table><tr><td class="code"><pre><span class="line">$\ce&#123;$K = \frac&#123;[<span class="string">\ce&#123;Hg^2+&#125;</span>][<span class="symbol">\ce&#123;Hg&#125;</span>]&#125;&#123;[\ce&#123;Hg2^2+&#125;]&#125;$&#125;$</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="支援-HTML-語法"><a href="#支援-HTML-語法" class="headerlink" title="支援 HTML 語法"></a>支援 HTML 語法</h1>  <div>
  範例內容<br />
  範例內容<br />
  使用 HTML 連結語法 <a href="http://www.google.com" target="_blank">Google</a><br />

<p>  含有<span style="color:#ff00ff"> <em>顏色</em> </span>的段落內容<br>  </div></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">範例內容<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">範例內容<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">使用 HTML 連結語法 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.google.com"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>Google<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">含有<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:#ff00ff"</span>&gt;</span> *顏色* <span class="tag">&lt;/<span class="name">span</span>&gt;</span>的段落內容</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="程式碼區塊"><a href="#程式碼區塊" class="headerlink" title="程式碼區塊"></a>程式碼區塊</h1><ul>
<li><h2 id="C-程式碼"><a href="#C-程式碼" class="headerlink" title="C# 程式碼"></a>C# 程式碼</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C# 程式碼區塊</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">string</span> String1 &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">int</span> Int1 &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyClass</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    Console.WriteLine(<span class="string">"建構子"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<pre>
&#96;&#96;&#96;csharp
// C# 程式碼區塊
public class MyClass
{
  public string String1 { get; set; }
  public int Int1 { get; set; }

  public MyClass()
  {
      Console.WriteLine("建構子");
  }
}
&#96;&#96;&#96;
</pre>
</li>
<li><h2 id="Javascript-程式碼"><a href="#Javascript-程式碼" class="headerlink" title="Javascript 程式碼"></a>Javascript 程式碼</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Javascript 程式碼區塊</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyFunc</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  alert(<span class="string">"Hello World !"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<pre>
&#96;&#96;&#96;javascript
// Javascript 程式碼區塊
function MyFunc()
{
  alert("Hello World !");
}
&#96;&#96;&#96;
</pre>
</li>
<li><h2 id="程式碼區塊支援的語言種類"><a href="#程式碼區塊支援的語言種類" class="headerlink" title="程式碼區塊支援的語言種類"></a>程式碼區塊支援的語言種類</h2><ul>
<li><a href="https://github.com/github/linguist/blob/master/vendor/README.md" target="_blank" rel="noopener">Grammar index</a></li>
<li><a href="https://github.com/github/linguist/blob/master/lib/linguist/languages.yml" target="_blank" rel="noopener">參考 languages YAML file</a></li>
</ul>
</li>
</ul>
<hr>
<h1 id="表格、對齊方式、文字樣式"><a href="#表格、對齊方式、文字樣式" class="headerlink" title="表格、對齊方式、文字樣式"></a>表格、對齊方式、文字樣式</h1><table>
<thead>
<tr>
<th align="left">A</th>
<th>B</th>
<th align="center">C</th>
<th align="right">D</th>
</tr>
</thead>
<tbody><tr>
<td align="left">XXXXXXXXXX</td>
<td>XXXXXXXXXX</td>
<td align="center">XXXXXXXXXX</td>
<td align="right">XXXXXXXXXX</td>
</tr>
<tr>
<td align="left">靠左</td>
<td>預設</td>
<td align="center">置中</td>
<td align="right">靠右</td>
</tr>
<tr>
<td align="left">A1</td>
<td>B1</td>
<td align="center">C3</td>
<td align="right">D1</td>
</tr>
<tr>
<td align="left"><code>凸顯字</code></td>
<td>B2</td>
<td align="center">C2</td>
<td align="right">D2</td>
</tr>
<tr>
<td align="left"><em>斜體字</em></td>
<td><strong>粗體字</strong></td>
<td align="center"><u>底線</u></td>
<td align="right"><del>刪除線</del></td>
</tr>
</tbody></table>
  <figure class="highlight md"><table><tr><td class="code"><pre><span class="line">| A          | B          | C          | D          |</span><br><span class="line">|:---        | ---        |:---:       | ---:       |</span><br><span class="line">| XXXXXXXXXX | XXXXXXXXXX | XXXXXXXXXX | XXXXXXXXXX |</span><br><span class="line">| 靠左       | 預設       | 置中       | 靠右       |</span><br><span class="line">| A1         | B1         | C3         | D1         |</span><br><span class="line">| <span class="code">`凸顯字`</span>   | B2         | C2         | D2         |</span><br><span class="line">| <span class="emphasis">*斜體字*</span>   | <span class="strong">**粗體字**</span> | <span class="xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>底線<span class="xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span>| ~~刪除線~~ |</span><br></pre></td></tr></table></figure>

<p>  第一列是標題 ( 輸出結果以粗體顯示 )<br>  第二列是設置對齊方式，不會顯示 ( 至少三個 <code>-</code> 符號表示內容位置，<code>:</code> 表示對齊位置 )<br>  第三列之後是表格資料內容<br>  表格的 Markdown 可用 <code>空白鍵</code> 排版增加可讀性 ( 不會影響輸出結果 )<br>  表格內可使用文字格式 Markdown 語法</p>
<hr>
<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><ul>
<li><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>有序列表開頭為 <code>數字</code> + <code>.</code> + <code>空白鍵</code></p>
</li>
</ul>
<ol>
<li>有序列表 1</li>
<li>有序列表 2<ol>
<li>有序列表 1-1</li>
<li>有序列表 1-2<ol>
<li>有序列表為 <code>數字</code> + <code>.</code> + <code>空白鍵</code><blockquote>
<ol start="2">
<li>可搭配引言符號 <code>&gt;</code></li>
</ol>
<ul>
<li>可搭配無序列表符號 *</li>
</ul>
<ul>
<li>可搭配無序列表符號 +</li>
</ul>
<ul>
<li>可搭配無序列表符號 -</li>
</ul>
</blockquote>
</li>
</ol>
</li>
<li>有序列表 1-3 結尾加 <code>兩個空白鍵</code> + <code>換行</code> __<br>這行文字就會對齊</li>
<li>有序列表 1-4</li>
</ol>
</li>
<li>有序列表 3</li>
</ol>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>有序列表 1</span><br><span class="line"><span class="bullet">2. </span>有序列表 2</span><br><span class="line"><span class="bullet">   1. </span>有序列表 1-1</span><br><span class="line"><span class="bullet">   2. </span>有序列表 1-2</span><br><span class="line"><span class="bullet">      1. </span>有序列表為 <span class="code">`數字`</span> + <span class="code">`.`</span> + <span class="code">`空白鍵`</span></span><br><span class="line"><span class="code">      &gt; 2. 可搭配引言符號 `&gt;`</span></span><br><span class="line"><span class="code">      &gt; * 可搭配無序列表符號 *</span></span><br><span class="line"><span class="code">      &gt; + 可搭配無序列表符號 +</span></span><br><span class="line"><span class="code">      &gt; - 可搭配無序列表符號 -</span></span><br><span class="line"><span class="bullet">   3. </span>有序列表 1-3 結尾加 <span class="code">`兩個空白鍵`</span> + <span class="code">`換行`</span> __  </span><br><span class="line"><span class="code">      這行文字就會對齊</span></span><br><span class="line"><span class="bullet">   4. </span>有序列表 1-4</span><br><span class="line"><span class="bullet">3. </span>有序列表 3</span><br></pre></td></tr></table></figure>

<ul>
<li><h2 id="無序列表"><a href="#無序列表" class="headerlink" title="無序列表"></a>無序列表</h2><p>無序列表開頭為 <code>*</code> 或 <code>+</code> 或 <code>-</code></p>
</li>
</ul>
<ul>
<li>無序列表 1</li>
<li>無序列表 2<ul>
<li>無序列表 1-1</li>
<li>無序列表 1-2<ul>
<li>無序列表為 <code>*</code> 或 <code>+</code> 或 <code>-</code><blockquote>
<ul>
<li>可搭配引言符號 <code>&gt;</code></li>
</ul>
<ol>
<li>可搭配有序列表 <code>數字</code> + <code>.</code> + <code>空白鍵</code></li>
<li>可搭配有序列表 <code>數字</code> + <code>.</code> + <code>空白鍵</code></li>
<li>可搭配有序列表 <code>數字</code> + <code>.</code> + <code>空白鍵</code></li>
</ol>
</blockquote>
</li>
</ul>
</li>
<li>無序列表 1-3 結尾加 <code>兩個空白鍵</code> + <code>換行</code> __<br>這行文字就會對齊</li>
<li>無序列表 1-4</li>
</ul>
</li>
<li>無序列表 3</li>
</ul>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="bullet">- </span>無序列表 1</span><br><span class="line"><span class="bullet">- </span>無序列表 2</span><br><span class="line"><span class="bullet">  - </span>無序列表 1-1</span><br><span class="line"><span class="bullet">  - </span>無序列表 1-2</span><br><span class="line"><span class="bullet">    - </span>無序列表為 <span class="code">`*`</span> 或 <span class="code">`+`</span> 或 <span class="code">`-`</span></span><br><span class="line"><span class="code">    &gt; - 可搭配引言符號 `&gt;`</span></span><br><span class="line"><span class="code">    &gt; 1. 可搭配有序列表 `數字` + `.` + `空白鍵`</span></span><br><span class="line"><span class="code">    &gt; 2. 可搭配有序列表 `數字` + `.` + `空白鍵`</span></span><br><span class="line"><span class="code">    &gt; 3. 可搭配有序列表 `數字` + `.` + `空白鍵`</span></span><br><span class="line"><span class="bullet">  - </span>無序列表 1-3 結尾加 <span class="code">`兩個空白鍵`</span> + <span class="code">`換行`</span> __  </span><br><span class="line"><span class="code">    這行文字就會對齊</span></span><br><span class="line"><span class="bullet">  - </span>無序列表 1-4</span><br><span class="line"><span class="bullet">- </span>無序列表 3</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="待辦事項"><a href="#待辦事項" class="headerlink" title="待辦事項"></a>待辦事項</h1><ul>
<li><input disabled="" type="checkbox"> 工作</li>
<li><input checked="" disabled="" type="checkbox"> <del>休息</del></li>
<li><input checked="" disabled="" type="checkbox"> <del>睡覺</del></li>
</ul>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="bullet">- </span>[ ] 工作</span><br><span class="line"><span class="bullet">- </span>[x] ~~休息~~</span><br><span class="line"><span class="bullet">- </span>[X] ~~睡覺~~</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="表情符號-emoji"><a href="#表情符號-emoji" class="headerlink" title="表情符號 (emoji)"></a>表情符號 (emoji)</h1><blockquote>
<p>太多了，請參考 <a href="https://www.webfx.com/tools/emoji-cheat-sheet" target="_blank" rel="noopener">https://www.webfx.com/tools/emoji-cheat-sheet</a></p>
</blockquote>
<hr>
<h1 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h1><ul>
<li><h2 id="強制換行"><a href="#強制換行" class="headerlink" title="強制換行"></a>強制換行</h2><p>若遇到多行段落內容在顯示時沒有正確換行，可在要換行內容的結尾加 <code>兩個空白鍵</code> 強制換行，例如：  </p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">第一行段落內容 + <span class="code">`兩個空白鍵`</span> + <span class="code">`換行符號`</span></span><br><span class="line">第二行段落內容</span><br></pre></td></tr></table></figure>

<p>顯示結果  </p>
<p>第一行段落內容<br>第二行段落內容</p>
</li>
<li><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://guides.github.com/features/mastering-markdown/" target="_blank" rel="noopener">Mastering Markdown</a></li>
<li><a href="https://github.github.com/gfm/" target="_blank" rel="noopener">GitHub Flavored Markdown Spec</a></li>
<li><a href="https://help.github.com/en/github/writing-on-github/basic-writing-and-formatting-syntax" target="_blank" rel="noopener">Basic writing and formatting syntax</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>搜尋 Udemy 免費課程的 Bookmarklet</title>
    <url>/2019/12/24/Bookmarklet%20for%20search%20Udemy%20FREE%20courses/</url>
    <content><![CDATA[<p>用 Javascript 寫的 Bookmarklet</p>
<p>直接按下方連結即可搜尋 Udemy 免費課程</p>
<p>也可將連結拖拉至瀏覽器書籤列，以後點擊書籤即可立即搜尋 Udemy 免費課程</p>
<p><a href="javascript:(function(){var%20q=prompt('search%20for%20Udemy%20FREE%20courses','');if(q!=null&&q!='')window.open('https://www.udemy.com/courses/search/?price=price-free&src=ukw&q='+escape(q));})();">搜尋 Udemy 免費課程</a></p>
]]></content>
      <categories>
        <category>小工具</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL JOIN 的圖解筆記</title>
    <url>/2019/07/11/SQL-JOIN/</url>
    <content><![CDATA[<p>今早在復習 SQL 語法，看到十年前的 JOIN 筆記，決定把他圖形化，以後若要用到就一目瞭然了<br>既然都做了，就貼上來分享，有需要的人請自取 🙂</p>
<a id="more"></a>

<p><img src="/2019/07/11/SQL-JOIN/SQL-JOIN-01.jpg" alt="Left Join、Inner Join、RIGHT Join" title="Left Join、Inner Join、RIGHT Join"></p>
<hr>
<p><img src="/2019/07/11/SQL-JOIN/SQL-JOIN-02.jpg" alt="Left Join (Minus T2)、Union All (Minus Inner Join)、Right Join (Minus T1)" title="Left Join (Minus T2)、Union All (Minus Inner Join)、Right Join (Minus T1)"></p>
<hr>
<p><img src="/2019/07/11/SQL-JOIN/SQL-JOIN-03.jpg" alt="Full Outer Join、Union All" title="Full Outer Join、Union All"></p>
<hr>
<p><span style="color:#ff0000"> <strong>※ 注意 ※</strong> </span>  </p>
<p>這份筆記使用 <strong>文氏圖</strong> 是為了方便記憶<br>範例語法有特別為呈現 <strong>文氏圖</strong> 而調整過<br>通常在實際應用的情況 <strong>文氏圖</strong> <span style="color:#ff0000"> <strong>無法完全正確地</strong> </span> 表示出該 JOIN 的結果</p>
<blockquote>
<p>可參考這個說明，裡面用的圖解比較精準，只是不容易記憶<br><a href="https://blog.jooq.org/2016/07/05/say-no-to-venn-diagrams-when-explaining-joins" target="_blank" rel="noopener">https://blog.jooq.org/2016/07/05/say-no-to-venn-diagrams-when-explaining-joins</a></p>
</blockquote>
]]></content>
      <categories>
        <category>T-SQL</category>
      </categories>
      <tags>
        <tag>T-SQL</tag>
      </tags>
  </entry>
</search>
